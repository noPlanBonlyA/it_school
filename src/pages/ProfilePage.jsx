import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import AttendanceWidget from '../components/AttendanceWidget';
import { useAuth } from '../contexts/AuthContext';
import { getMe } from '../services/userService';
import api from '../api/axiosInstance';
import '../styles/ProfilePage.css';

export default function ProfilePage() {
  const navigate = useNavigate();
  const { user: authUser, updateUser } = useAuth();
  const [user, setUser] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(null);

  useEffect(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ AuthContext –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º
    if (authUser) {
      setUser(authUser);
    } else {
      getMe()
        .then(setUser)
        .catch(() => alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'));
    }
  }, [authUser]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
        return;
      }

      setSelectedFile(file);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
      const reader = new FileReader();
      reader.onload = (e) => setPreviewUrl(e.target.result);
      reader.readAsDataURL(file);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  const handleUploadAvatar = async () => {
    if (!selectedFile || !user?.id) return;

    try {
      setUploading(true);
      
      console.log('[ProfilePage] Uploading avatar for user ID:', user.id);
      
      // –°–æ–∑–¥–∞–µ–º FormData –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É API
      const formData = new FormData();
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
      const userData = {
        username: user.username,
        first_name: user.first_name,
        surname: user.surname,
        patronymic: user.patronymic || '',
        email: user.email,
        birth_date: user.birth_date,
        role: user.role,
        phone_number: user.phone_number || ''
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ JSON
      formData.append('user_data', JSON.stringify(userData));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º 'image' (–∫–∞–∫ –≤ API)
      formData.append('image', selectedFile);

      console.log('[ProfilePage] Form data prepared:', {
        userData,
        fileName: selectedFile.name,
        fileSize: selectedFile.size,
        fileType: selectedFile.type
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await api.put(`/users/${user.id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      console.log('[ProfilePage] Avatar uploaded successfully:', response.data);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ AuthContext –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      try {
        const updatedUser = await updateUser();
        setUser(updatedUser);
        console.log('[ProfilePage] User data updated successfully');
      } catch (updateError) {
        console.warn('[ProfilePage] Failed to update user context, using response data:', updateError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ AuthContext, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        setUser(response.data);
      }
      
      setSelectedFile(null);
      setPreviewUrl(null);
      
      // –û—á–∏—â–∞–µ–º input
      const fileInput = document.getElementById('avatar-input');
      if (fileInput) fileInput.value = '';
      
      alert('–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      
    } catch (error) {
      console.error('[ProfilePage] Error uploading avatar:', error);
      
      const errorMessage = error.response?.data?.detail || 
                          error.response?.data?.message || 
                          error.message || 
                          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: ' + errorMessage);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    } finally {
      setUploading(false);
    }
  };

  // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleCancelUpload = () => {
    setSelectedFile(null);
    setPreviewUrl(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∞–≤–∞—Ç–∞—Ä–∞
  const getAvatarUrl = () => {
    if (previewUrl) return previewUrl;
    
    // –ü–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ 'photo'
    if (user?.photo?.url) {
      // –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (user.photo.url.startsWith('http')) {
        return user.photo.url;
      }
      // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
      return `${window.location.protocol}//${window.location.hostname}:8080${user.photo.url}`;
    }
    
    // Fallback –∫ —Å—Ç–∞—Ä—ã–º –ø–æ–ª—è–º –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
    if (user?.avatar?.url) {
      if (user.avatar.url.startsWith('http')) {
        return user.avatar.url;
      }
      return `${window.location.protocol}//${window.location.hostname}:8080${user.avatar.url}`;
    }
    
    return user?.avatar_url || '/img/default-avatar.svg';
  };

  if (!user) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean)
    .join(' ');
  const birthDate = user.birth_date
    ? new Date(user.birth_date).toLocaleDateString('ru-RU')
    : '‚Äî';

  return (
    <div className="app-layout">
      <Sidebar activeItem="settings" userRole={user.role} />

      <div className="main-content">
        <Topbar
          userName={fullName}
          userRole={user.role}
          pageTitle="–ü—Ä–æ—Ñ–∏–ª—å"
          onBellClick={() => {}}
          onProfileClick={() => {}}
        />

        <div className="profile-page">
          <div className="profile-form">
            {/* –∞–≤–∞—Ç–∞—Ä + username */}
            <div className="avatar-block">
              <div className="avatar-container">
                <img
                  className="avatar-img"
                  src={getAvatarUrl()}
                  alt="avatar"
                  onError={(e) => {
                    console.warn('Avatar image failed to load:', e.target.src);
                    e.target.src = '/img/default-avatar.svg';
                  }}
                />
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
                <div className="avatar-upload">
                  <input
                    type="file"
                    id="avatar-input"
                    accept="image/*"
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                  />
                  <label htmlFor="avatar-input" className="upload-button">
                    üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ
                  </label>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π */}
                {selectedFile && (
                  <div className="upload-controls">
                    <button
                      onClick={handleUploadAvatar}
                      disabled={uploading}
                      className="save-button"
                    >
                      {uploading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                    </button>
                    <button
                      onClick={handleCancelUpload}
                      className="cancel-button"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                )}
              </div>
              
              <span className="username">{user.username || '‚Äî'}</span>
            </div>

            {/* —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–ª—è */}
            <div className="fields-grid">
              <ReadOnlyField label="üë§ –§–ò–û"           value={fullName}   />
              <ReadOnlyField label="üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" value={birthDate}  />
              <ReadOnlyField label="üìß –ü–æ—á—Ç–∞"         value={user.email || '‚Äî'} />
              <ReadOnlyField label="üì± –¢–µ–ª–µ—Ñ–æ–Ω"       value={user.phone_number || '‚Äî'} />
            </div>

            {/* –í–∏–¥–∂–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
            {user.role === 'student' && (
              <div className="attendance-section">
                <AttendanceWidget userId={user.id} />
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
            {user.role === 'student' && (
              <div className="coin-history-section">
                <button 
                  className="coin-history-btn"
                  onClick={() => navigate('/coin-history')}
                >
                  üí∞ –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–µ—Ç
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function ReadOnlyField({ label, value }) {
  return (
    <div className="field">
      <label>{label}</label>
      <input className="input read-only" value={value} readOnly />
    </div>
  );
}
