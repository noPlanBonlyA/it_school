// src/pages/ShopPage.jsx

import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Sidebar from '../components/Sidebar';
import SmartTopBar from '../components/SmartTopBar';
import BestCoins from '../components/BestCoin';
import {
  getAvailableProducts,
  getNotAvailableProducts
} from '../services/productService';
import { getCurrentStudent } from '../services/studentService';
import '../styles/ShopPageNew.css';

export default function ShopPage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [studentData, setStudentData] = useState(null);
  const [availableProducts, setAvailableProducts] = useState([]);
  const [notAvailableProducts, setNotAvailableProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [loadingCoins, setLoadingCoins] = useState(true);
  const [activeTab, setActiveTab] = useState('available'); // 'available' | 'not-available'
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showPurchaseModal, setShowPurchaseModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (user.role !== 'student') {
      navigate('/');
      return;
    }
  }, [user, navigate]);

  const loadProducts = useCallback(async () => {
    try {
      setLoading(true);
      const studentCoins = studentData?.points || 0;
      
      console.log('ü™ô Student coins:', studentCoins);
      console.log('ü™ô Type of studentCoins:', typeof studentCoins);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      const availableData = await getAvailableProducts(studentCoins, 50, 0);
      console.log('‚úÖ Available products received:', availableData);
      console.log('‚úÖ Available products array:', availableData.objects?.map(p => ({ name: p.name, price: p.price, priceType: typeof p.price })));
      const sortedAvailable = sortProducts(availableData.objects || []);
      setAvailableProducts(sortedAvailable);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
      const notAvailableData = await getNotAvailableProducts(studentCoins, 50, 0);
      console.log('‚ùå Not available products received:', notAvailableData);
      console.log('‚ùå Not available products array:', notAvailableData.objects?.map(p => ({ name: p.name, price: p.price, priceType: typeof p.price })));
      const sortedNotAvailable = sortProducts(notAvailableData.objects || []);
      setNotAvailableProducts(sortedNotAvailable);
      
    } catch (error) {
      console.error('Error loading products:', error);
    } finally {
      setLoading(false);
    }
  }, [studentData?.points]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  const sortProducts = (productsList) => {
    return [...productsList].sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ is_pinned (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      if (a.is_pinned && !b.is_pinned) return -1;
      if (!a.is_pinned && b.is_pinned) return 1;
      // –ó–∞—Ç–µ–º –ø–æ —Ü–µ–Ω–µ (–¥–µ—à–µ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      return a.price - b.price;
    });
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
  useEffect(() => {
    loadStudentData();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
  useEffect(() => {
    if (studentData?.points !== undefined) {
      loadProducts();
    }
  }, [studentData?.points, loadProducts]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        if (showPurchaseModal) {
          setShowPurchaseModal(false);
          setSelectedProduct(null);
        }
        if (showSuccessModal) {
          setShowSuccessModal(false);
          setSelectedProduct(null);
        }
      }
    };

    if (showPurchaseModal || showSuccessModal) {
      document.addEventListener('keydown', handleEscape);
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [showPurchaseModal, showSuccessModal]);

  const loadStudentData = async () => {
    try {
      setLoadingCoins(true);
      const student = await getCurrentStudent();
      setStudentData(student);
    } catch (error) {
      console.error('Error loading student data:', error);
    } finally {
      setLoadingCoins(false);
    }
  };

  const getProductImage = (product) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ photo –Ω–µ null –∏ –Ω–µ undefined
    if (product?.photo && product.photo !== null && product.photo.url) {
      const photoUrl = product.photo.url;
      
      // –ï—Å–ª–∏ URL —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (photoUrl.startsWith('http://') || photoUrl.startsWith('https://')) {
        return photoUrl;
      }
      
      // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL
      const baseURL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';
      const cleanPhotoUrl = photoUrl.startsWith('/') ? photoUrl : `/${photoUrl}`;
      const fullUrl = `${baseURL}${cleanPhotoUrl}`;
      return fullUrl;
    }
    
    return null;
  };

  const handlePurchase = (product) => {
    setSelectedProduct(product);
    setShowPurchaseModal(true);
  };

  const confirmPurchase = async () => {
    if (!selectedProduct) return;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setShowPurchaseModal(false);
    setShowSuccessModal(true);
  };

  const canAfford = (product) => { // eslint-disable-line no-unused-vars
    return (studentData?.points || 0) >= product.price;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
  const getCoinsProgress = (product) => {
    const currentCoins = studentData?.points || 0;
    const productPrice = product.price;
    const coinsNeeded = Math.max(0, productPrice - currentCoins);
    const progressPercentage = Math.min(100, (currentCoins / productPrice) * 100);
    
    return {
      currentCoins,
      productPrice,
      coinsNeeded,
      progressPercentage: Math.round(progressPercentage)
    };
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ') || user.username || '–°—Ç—É–¥–µ–Ω—Ç';

  if (loading && loadingCoins) {
    return (
      <div className="app-layout" style={{ width: '100vw', minHeight: '100vh' }}>
        <Sidebar activeItem="shop" userRole={user?.role} />
        <div className="main-content" style={{ marginLeft: '250px', width: 'calc(100vw - 250px)', maxWidth: 'none' }}>
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout" style={{ width: '100vw', minHeight: '100vh' }}>
      <Sidebar activeItem="shop" userRole={user?.role} />
      <div className="main-content" style={{ marginLeft: '250px', width: 'calc(100vw - 250px)', maxWidth: 'none' }}>
        <SmartTopBar pageTitle="–ú–∞–≥–∞–∑–∏–Ω" />
        <div className="shop-page" style={{ maxWidth: 'none', margin: '0', padding: '24px 40px', width: '100%' }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="page-header">
            <div className="header-info">
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω, {fullName}!</h2>
            </div>
            <div className="coins-display">
              <BestCoins amount={studentData?.points || 0} loading={loadingCoins} />
            </div>
          </div>

          {/* –í–∫–ª–∞–¥–∫–∏ */}
          <div className="shop-tabs">
            <button
              className={`tab-button ${activeTab === 'available' ? 'active' : ''}`}
              onClick={() => setActiveTab('available')}
            >
              –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({availableProducts.length})
            </button>
            <button
              className={`tab-button ${activeTab === 'not-available' ? 'active' : ''}`}
              onClick={() => setActiveTab('not-available')}
            >
              –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({notAvailableProducts.length})
            </button>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
          <div className="shop-content">
            {loading ? (
              <div className="loading-products">
                <div className="loader"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
              </div>
            ) : (
              <>
                {activeTab === 'available' && (
                  <div className="products-section">
                    {availableProducts.length === 0 ? (
                      <div className="empty-state">
                        <div className="empty-icon">üõçÔ∏è</div>
                        <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</h3>
                        <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∑–∞ –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã.</p>
                      </div>
                    ) : (
                      <>
                        <div className="section-header">
                          <h3>–¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å</h3>
                          <p>–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
                        </div>
                        <div className="products-grid">
                          {availableProducts.map(product => (
                            <div key={product.id} className={`product-card available ${product.is_pinned ? 'pinned' : ''}`}>
                              {product.is_pinned && (
                                <div className="pinned-badge">
                                  ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º
                                </div>
                              )}
                              <div className="product-image">
                                {getProductImage(product) ? (
                                  <>
                                    <img 
                                      src={getProductImage(product)} 
                                      alt={product.name}
                                      onError={(e) => {
                                        e.target.style.display = 'none';
                                        e.target.parentNode.querySelector('.image-placeholder').style.display = 'flex';
                                      }}
                                    />
                                    <div className="image-placeholder" style={{display: 'none'}}>
                                      <div className="placeholder-icon">‚ùå</div>
                                      <div className="placeholder-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                                    </div>
                                  </>
                                ) : (
                                  <div className="image-placeholder no-photo">
                                    <div className="placeholder-icon">ÔøΩ</div>
                                    <div className="placeholder-text">–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>
                                    <div className="placeholder-subtext">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                                  </div>
                                )}
                              </div>
                              <div className="product-info">
                                <h3>{product.name}</h3>
                                <p className="product-description">{product.description}</p>
                                <div className="product-footer">
                                  <div className="product-price">
                                    <span className="price">{product.price}</span>
                                    <span className="currency">–º–æ–Ω–µ—Ç</span>
                                  </div>
                                  <button 
                                    className="btn-purchase"
                                    onClick={() => handlePurchase(product)}
                                  >
                                    –ö—É–ø–∏—Ç—å
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </>
                    )}
                  </div>
                )}

                {activeTab === 'not-available' && (
                  <div className="products-section">
                    {notAvailableProducts.length === 0 ? (
                      <div className="empty-state">
                        <div className="empty-icon">‚ú®</div>
                        <h3>–û—Ç–ª–∏—á–Ω–æ!</h3>
                        <p>–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!</p>
                      </div>
                    ) : (
                      <>
                        <div className="section-header">
                          <h2>–¢–æ–≤–∞—Ä—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫—É–ø–æ–∫</h2>
                          <p>–ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã</p>
                        </div>
                        <div className="products-grid">
                          {notAvailableProducts.map(product => {
                            const progress = getCoinsProgress(product);
                            return (
                              <div key={product.id} className={`product-card not-available ${product.is_pinned ? 'pinned' : ''}`}>
                                {product.is_pinned && (
                                  <div className="pinned-badge">
                                    ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º
                                  </div>
                                )}
                                <div className="product-image">
                                  {getProductImage(product) ? (
                                    <>
                                      <img 
                                        src={getProductImage(product)} 
                                        alt={product.name}
                                        onError={(e) => {
                                          e.target.style.display = 'none';
                                          e.target.parentNode.querySelector('.image-placeholder').style.display = 'flex';
                                        }}
                                      />
                                      <div className="image-placeholder" style={{display: 'none'}}>
                                        <div className="placeholder-icon">‚ùå</div>
                                        <div className="placeholder-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                                      </div>
                                    </>
                                  ) : (
                                    <div className="image-placeholder no-photo">
                                      <div className="placeholder-icon">ÔøΩ</div>
                                      <div className="placeholder-text">–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>
                                      <div className="placeholder-subtext">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</div>
                                    </div>
                                  )}
                                  <div className="unavailable-overlay">
                                    <span>–ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ</span>
                                  </div>
                                </div>
                                <div className="product-info">
                                  <h3>{product.name}</h3>
                                  <p className="product-description">{product.description}</p>
                                  
                                  {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è */}
                                  <div className="coins-progress">
                                    <div className="progress-header">
                                      <span className="progress-label">–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è</span>
                                      <span className="progress-percentage">{progress.progressPercentage}%</span>
                                    </div>
                                    <div className="progress-bar">
                                      <div 
                                        className="progress-fill" 
                                        style={{ width: `${progress.progressPercentage}%` }}
                                      ></div>
                                    </div>
                                    <div className="progress-info">
                                      <span className="current-coins">{progress.currentCoins} üíª</span>
                                      <span className="target-coins">{progress.productPrice} üíª</span>
                                    </div>
                                  </div>

                                  <div className="product-footer">
                                    <div className="product-price">
                                      <span className="price">{product.price}</span>
                                      <span className="currency">–º–æ–Ω–µ—Ç</span>
                                    </div>
                                    <div className="coins-needed">
                                      <span className="needed-icon">üîí</span>
                                      <span className="needed-text">–ù—É–∂–Ω–æ –µ—â–µ: </span>
                                      <span className="needed-amount">{progress.coinsNeeded}</span>
                                      <span className="needed-currency"> –º–æ–Ω–µ—Ç</span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </>
                    )}
                  </div>
                )}
              </>
            )}
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ */}
        {showPurchaseModal && selectedProduct && (
          <div className="modal-overlay" onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowPurchaseModal(false);
              setSelectedProduct(null);
            }
          }}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</h2>
                <button 
                  className="close-modal"
                  onClick={() => {
                    setShowPurchaseModal(false);
                    setSelectedProduct(null);
                  }}
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >
                  √ó
                </button>
              </div>
              
              <div className="modal-body">
                <div className="purchase-info">
                  <div className="product-preview">
                    {getProductImage(selectedProduct) ? (
                      <>
                        <img 
                          src={getProductImage(selectedProduct)} 
                          alt={selectedProduct.name}
                          onError={(e) => {
                            e.target.style.display = 'none';
                            e.target.parentNode.querySelector('.image-placeholder').style.display = 'flex';
                          }}
                        />
                        <div className="image-placeholder" style={{display: 'none'}}>
                          <div className="placeholder-icon">‚ùå</div>
                          <div className="placeholder-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                        </div>
                      </>
                    ) : (
                      <div className="image-placeholder no-photo">
                        <div className="placeholder-icon">ÔøΩ</div>
                        <div className="placeholder-text">–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>
                      </div>
                    )}
                  </div>
                  <div className="purchase-details">
                    <h3>{selectedProduct.name}</h3>
                    <p>{selectedProduct.description}</p>
                    <div className="price-info">
                      <div className="purchase-price">
                        –¶–µ–Ω–∞: <strong>{selectedProduct.price} –º–æ–Ω–µ—Ç</strong>
                      </div>
                      <div className="balance-info">
                        –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>{studentData?.points || 0} –º–æ–Ω–µ—Ç</strong>
                      </div>
                      <div className="after-purchase">
                        –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <strong>{(studentData?.points || 0) - selectedProduct.price} –º–æ–Ω–µ—Ç</strong>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="modal-actions">
                <button 
                  className="btn-primary"
                  onClick={confirmPurchase}
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É
                </button>
                <button 
                  className="btn-primary"
                  style={{ backgroundColor: '#6c757d' }}
                  onClick={() => {
                    setShowPurchaseModal(false);
                    setSelectedProduct(null);
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ */}
        {showSuccessModal && selectedProduct && (
          <div className="modal-overlay" onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowSuccessModal(false);
              setSelectedProduct(null);
            }
          }}>
            <div className="modal-content success-modal" onClick={(e) => e.stopPropagation()}>
              <div className="success-header">
                <div className="success-icon">üéâ</div>
                <h2>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</h2>
              </div>
              
              <div className="success-body">
                <div className="success-message">
                  <div className="purchased-item">
                    <strong>"{selectedProduct.name}"</strong>
                  </div>
                  <p className="instruction">
                    –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫&nbsp;–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è&nbsp;–ø–æ–∫—É–ø–∫–∏.
                  </p>
                </div>
              </div>
              
              <div className="success-actions">
                <button 
                  className="btn-success"
                  onClick={() => {
                    setShowSuccessModal(false);
                    setSelectedProduct(null);
                  }}
                >
                  –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ!&nbsp;üëç
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
