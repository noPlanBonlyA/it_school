// src/pages/ManageEventsPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import Sidebar from '../components/Sidebar';
import SmartTopBar from '../components/SmartTopBar';
import EventCreateModal from '../components/EventCreateModal';
import EventEditModal from '../components/EventEditModal';
import {
  getAllEvents,
  createEvent,
  updateEvent,
  deleteEvent,
  getEventWithUsers
} from '../services/eventService';
import '../styles/ManageEventsPage.css';
import '../styles/EventModals.css'; // –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

export default function ManageEventsPage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [events, setEvents] = useState([]);
  const [search, setSearch] = useState('');
  const [filtered, setFiltered] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  
  // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [eventToDelete, setEventToDelete] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
    if (!['admin', 'superadmin'].includes(user.role)) {
      navigate('/');
      return;
    }
  }, [user, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    loadEvents();
  }, []);

  // –ü–æ–∏—Å–∫
  useEffect(() => {
    if (!search.trim()) {
      setFiltered([]);
      setShowSuggestions(false);
    } else {
      const results = events.filter(event =>
        event.name.toLowerCase().includes(search.toLowerCase()) ||
        event.description.toLowerCase().includes(search.toLowerCase()) ||
        event.auditorium.toLowerCase().includes(search.toLowerCase())
      );
      setFiltered(results);
      setShowSuggestions(true);
    }
  }, [search, events]);

  const loadEvents = async () => {
    try {
      setLoading(true);
      const data = await getAllEvents({ limit: 100 });
      setEvents(data.objects || []);
    } catch (error) {
      console.error('Error loading events:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
    } finally {
      setLoading(false);
    }
  };

  const handleCreate = async (eventData) => {
    try {
      const createdEvent = await createEvent(eventData);
      setShowCreateModal(false);
      await loadEvents();
      return createdEvent; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ EventCreateModal
    } catch (error) {
      console.error('Error creating event:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã EventCreateModal –º–æ–≥ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    }
  };

  const handleEdit = async (event) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      const eventWithUsers = await getEventWithUsers(event.id);
      setEditingEvent({ ...event, users: eventWithUsers.users || [] });
      setShowEditModal(true);
    } catch (error) {
      console.error('Error loading event details:', error);
      setEditingEvent(event);
      setShowEditModal(true);
    }
  };

  const handleUpdate = async (eventData) => {
    try {
      await updateEvent(editingEvent.id, eventData);
      alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
      setShowEditModal(false);
      setEditingEvent(null);
      await loadEvents();
    } catch (error) {
      console.error('Error updating event:', error);
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    }
  };

  const handleDelete = (event) => {
    setEventToDelete(event);
    setShowDeleteConfirm(true);
  };

  const confirmDelete = async () => {
    if (!eventToDelete) return;
    
    try {
      await deleteEvent(eventToDelete.id);
      alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
      await loadEvents();
    } catch (error) {
      console.error('Error deleting event:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
    } finally {
      setShowDeleteConfirm(false);
      setEventToDelete(null);
    }
  };

  const formatDateTime = (dateTime) => {
    if (!dateTime) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const date = new Date(dateTime);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const isEventActive = (event) => {
    const now = new Date();
    const start = new Date(event.start_datetime);
    const end = new Date(event.end_datetime);
    return now >= start && now <= end;
  };

  const isEventUpcoming = (event) => {
    const now = new Date();
    const start = new Date(event.start_datetime);
    return start > now;
  };

  const displayedEvents = search.trim() ? filtered : events;

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="manage-events" userRole={user?.role} />
        <div className="main-content">
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem="manage-events" userRole={user?.role} />
      <div className="main-content">
        <SmartTopBar />
        <div className="manage-events-page">
          <div className="page-header">
            <div className="header-info">
              <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏</h1>
              <p>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏</p>
            </div>
            <button 
              className="btn-primary"
              onClick={() => setShowCreateModal(true)}
            >
              + –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            </button>
          </div>

          {/* –ü–æ–∏—Å–∫ */}
          <div className="search-section">
            <div className="search-container">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="search-input"
              />
              {showSuggestions && filtered.length > 0 && (
                <div className="search-suggestions">
                  {filtered.slice(0, 5).map(event => (
                    <div 
                      key={event.id} 
                      className="suggestion-item"
                      onClick={() => {
                        setSearch(event.name);
                        setShowSuggestions(false);
                      }}
                    >
                      {event.name} - {formatDateTime(event.start_datetime)}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π */}
          <div className="events-grid">
            {displayedEvents.length === 0 ? (
              <div className="empty-state">
                <span className="empty-icon">üìÖ</span>
                <h3>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–µ—Å—å</p>
              </div>
            ) : (
              displayedEvents.map(event => (
                <div 
                  key={event.id} 
                  className={`event-card ${
                    isEventActive(event) ? 'active' : 
                    isEventUpcoming(event) ? 'upcoming' : 'past'
                  }`}
                >
                  <div className="event-header">
                    <h3>{event.name}</h3>
                    <div className="event-status">
                      {isEventActive(event) && <span className="status-badge active">–°–µ–π—á–∞—Å</span>}
                      {isEventUpcoming(event) && <span className="status-badge upcoming">–ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ</span>}
                      {!isEventActive(event) && !isEventUpcoming(event) && <span className="status-badge past">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>}
                    </div>
                  </div>
                  
                  <div className="event-info">
                    <div className="event-time">
                      <span className="time-label">–ù–∞—á–∞–ª–æ:</span>
                      <span className="time-value">{formatDateTime(event.start_datetime)}</span>
                    </div>
                    <div className="event-time">
                      <span className="time-label">–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span>
                      <span className="time-value">{formatDateTime(event.end_datetime)}</span>
                    </div>
                    {event.auditorium && (
                      <div className="event-location">
                        <span className="location-icon">üìç</span>
                        <span>{event.auditorium}</span>
                      </div>
                    )}
                  </div>

                  {event.description && (
                    <p className="event-description">{event.description}</p>
                  )}

                  <div className="event-actions">
                    <button 
                      className="btn-secondary"
                      onClick={() => handleEdit(event)}
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      className="btn-danger"
                      onClick={() => handleDelete(event)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è */}
        {showCreateModal && (
          <EventCreateModal
            onSave={handleCreate}
            onClose={() => setShowCreateModal(false)}
          />
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {showEditModal && editingEvent && (
          <EventEditModal
            event={editingEvent}
            onSave={handleUpdate}
            onClose={() => {
              setShowEditModal(false);
              setEditingEvent(null);
            }}
          />
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
        {showDeleteConfirm && (
          <div className="events-modal-overlay">
             <div className="modal-content small">
               <div className="modal-header">
                 <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h2>
               </div>
               <div className="modal-body">
                 <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "{eventToDelete?.name}"?</p>
                 <p className="warning-text">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
               </div>
               <div className="modal-actions">
                 <button 
                   className="btn-danger"
                   onClick={confirmDelete}
                 >
                   –£–¥–∞–ª–∏—Ç—å
                 </button>
                 <button 
                   className="btn-secondary"
                   onClick={() => {
                     setShowDeleteConfirm(false);
                     setEventToDelete(null);
                   }}
                 >
                   –û—Ç–º–µ–Ω–∞
                 </button>
               </div>
             </div>
           </div>
        )}
      </div>
    </div>
  );
}
