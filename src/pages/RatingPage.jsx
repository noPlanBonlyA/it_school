import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import { useAuth } from '../contexts/AuthContext';
import { getAllStudents, getCurrentUserRating } from '../services/ratingService';
import '../styles/RatingPage.css';

export default function RatingPage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [useMockData, setUseMockData] = useState(false);

  useEffect(() => {
    loadRating();
  }, []);

  const loadRating = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('[RatingPage] Loading students rating...');
      
      let studentsData = await getAllStudents();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ mock
      const hasMockData = studentsData.some(student => 
        student.user?.first_name === '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä' && student.user?.surname === '–ü–µ—Ç—Ä–æ–≤'
      );
      
      if (hasMockData) {
        setUseMockData(true);
        console.log('[RatingPage] Using mock data');
      } else {
        console.log('[RatingPage] Using real API data');
      }
      
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç, —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
      if (user.role === 'student' && !hasMockData) {
        const currentUserExists = studentsData.some(student => 
          student.user_id === user.id || student.user?.id === user.id
        );
        
        if (!currentUserExists) {
          try {
            const currentUserData = await getCurrentUserRating();
            if (currentUserData) {
              studentsData.push({
                ...currentUserData,
                user: {
                  id: user.id,
                  first_name: user.first_name,
                  surname: user.surname,
                  email: user.email,
                  role: 'student'
                }
              });
            }
          } catch (error) {
            console.log('[RatingPage] Could not load current user data, adding with 0 points');
            studentsData.push({
              id: user.id,
              user_id: user.id,
              points: 0,
              user: {
                id: user.id,
                first_name: user.first_name,
                surname: user.surname,
                email: user.email,
                role: 'student'
              }
            });
          }
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç (—É–±—ã–≤–∞–Ω–∏–µ)
      const sortedStudents = studentsData.sort((a, b) => (b.points || 0) - (a.points || 0));
      
      console.log('[RatingPage] Final sorted students:', sortedStudents);
      setStudents(sortedStudents);
      
    } catch (error) {
      console.error('[RatingPage] Error loading rating:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const getCurrentStudentPosition = () => {
    if (user.role !== 'student') return null;
    
    const position = students.findIndex(student => 
      student.user_id === user.id || student.user?.id === user.id
    );
    return position !== -1 ? position + 1 : null;
  };

  // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∞–ª—å –¥–ª—è —Ç–æ–ø-3
  const getMedal = (position) => {
    switch (position) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return null;
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
  const getPositionClass = (position) => {
    if (position <= 3) return `top-${position}`;
    return 'regular';
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const isCurrentUser = (student) => {
    return user.role === 'student' && (
      student.user_id === user.id || student.user?.id === user.id
    );
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ');

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="rating" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="rating" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="error-container">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={loadRating} className="btn-primary">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    );
  }

  const currentPosition = getCurrentStudentPosition();

  return (
    <div className="app-layout">
      <Sidebar activeItem="rating" userRole={user.role} />
      
      <div className="main-content">
        <Topbar
          userName={fullName}
          userRole={user.role}
          onProfileClick={() => navigate('/profile')}
        />

        <div className="rating-container">
          <div className="rating-header">
            <h1>üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h1>
            <p className="rating-description">
              –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–µ—Å—Ç–∫–æ–∏–Ω–æ–≤
            </p>
            
            {useMockData && (
              <div className="demo-notice">
                <span className="demo-badge">–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ</span>
                <p>–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞</p>
              </div>
            )}
            
            {user.role === 'student' && currentPosition && (
              <div className="current-position">
                <span className="position-badge">
                  –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #{currentPosition}
                </span>
              </div>
            )}
          </div>

          <div className="rating-stats">
            <div className="stat-card">
              <div className="stat-icon">üë•</div>
              <div className="stat-info">
                <div className="stat-number">{students.length}</div>
                <div className="stat-label">–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">üí∞</div>
              <div className="stat-info">
                <div className="stat-number">
                  {students.reduce((sum, student) => sum + (student.points || 0), 0)}
                </div>
                <div className="stat-label">–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">‚≠ê</div>
              <div className="stat-info">
                <div className="stat-number">
                  {students.length > 0 ? Math.round(students.reduce((sum, student) => sum + (student.points || 0), 0) / students.length) : 0}
                </div>
                <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
              </div>
            </div>
          </div>

          <div className="rating-table-container">
            {students.length === 0 ? (
              <div className="empty-rating">
                <div className="empty-icon">üìä</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞</h3>
                <p>–°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –º–æ–Ω–µ—Ç</p>
              </div>
            ) : (
              <div className="rating-table">
                <div className="table-header">
                  <div className="header-rank">–ú–µ—Å—Ç–æ</div>
                  <div className="header-student">–°—Ç—É–¥–µ–Ω—Ç</div>
                  <div className="header-points">–ú–æ–Ω–µ—Ç—ã</div>
                  <div className="header-progress">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
                </div>

                <div className="table-body">
                  {students.map((student, index) => {
                    const position = index + 1;
                    const medal = getMedal(position);
                    const isCurrentStudent = isCurrentUser(student);
                    const maxPoints = students[0]?.points || 1;
                    const progressPercent = Math.round(((student.points || 0) / maxPoints) * 100);

                    return (
                      <div 
                        key={student.id || student.user_id || index} 
                        className={`table-row ${getPositionClass(position)} ${isCurrentStudent ? 'current-user' : ''}`}
                      >
                        <div className="rank-cell">
                          <div className="rank-content">
                            {medal && <span className="medal">{medal}</span>}
                            <span className="rank-number">#{position}</span>
                          </div>
                        </div>

                        <div className="student-cell">
                          <div className="student-info">
                            <div className="student-avatar">
                              <span className="avatar-text">
                                {student.user?.first_name?.[0] || student.user?.username?.[0] || '?'}
                              </span>
                            </div>
                            <div className="student-details">
                              <div className="student-name">
                                {[student.user?.first_name, student.user?.surname]
                                  .filter(Boolean).join(' ') || student.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç'}
                              </div>
                              <div className="student-email">
                                {student.user?.email || '–ü–æ—á—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                              </div>
                            </div>
                            {isCurrentStudent && (
                              <div className="current-user-badge">–≠—Ç–æ –≤—ã!</div>
                            )}
                          </div>
                        </div>

                        <div className="points-cell">
                          <div className="points-content">
                            <span className="points-number">{student.points || 0}</span>
                            <span className="points-icon">ü™ô</span>
                          </div>
                        </div>

                        <div className="progress-cell">
                          <div className="progress-bar">
                            <div 
                              className="progress-fill"
                              style={{ width: `${progressPercent}%` }}
                            ></div>
                          </div>
                          <span className="progress-text">{progressPercent}%</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            )}
          </div>

          <div className="rating-footer">
            <div className="info-card">
              <h3>üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã?</h3>
              <ul>
                <li>–ü–æ—Å–µ—â–∞–π—Ç–µ –∑–∞–Ω—è—Ç–∏—è –≤–æ–≤—Ä–µ–º—è</li>
                <li>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</li>
                <li>–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É—Ä–æ–∫–∞—Ö</li>
                <li>–ü–æ–º–æ–≥–∞–π—Ç–µ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}