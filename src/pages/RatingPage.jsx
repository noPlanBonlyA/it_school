import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import { useAuth } from '../contexts/AuthContext';
import { getTop10WithCurrentUser } from '../services/ratingService';
import '../styles/RatingPage.css';

export default function RatingPage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [ratingData, setRatingData] = useState({
    top10: [],
    currentUser: {
      position: null,
      data: null,
      isInTop10: false
    },
    totalStudents: 0,
    hasFullAccess: true
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [autoUpdate, setAutoUpdate] = useState(true);
  const [previousRating, setPreviousRating] = useState(null);

  const loadRating = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('[RatingPage] Loading rating data...');
      
      const data = await getTop10WithCurrentUser(user.id);
      
      console.log('[RatingPage] Received rating data:', data);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setRatingData(prevData => {
        setPreviousRating(prevData);
        return data;
      });
      setLastUpdated(new Date());
      
    } catch (error) {
      console.error('[RatingPage] Error loading rating:', error);
      setError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
    } finally {
      setLoading(false);
    }
  }, [user.id]);

  useEffect(() => {
    loadRating();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    let interval;
    if (autoUpdate) {
      interval = setInterval(() => {
        loadRating();
      }, 30000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [autoUpdate, loadRating]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const getCurrentStudentPosition = () => { // eslint-disable-line no-unused-vars
    return ratingData.currentUser.position;
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const isCurrentUser = (student) => {
    return user.role === 'student' && (
      student.user_id === user.id || student.user?.id === user.id
    );
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const getPositionChange = (student, currentPosition) => {
    if (!previousRating || previousRating.top10.length === 0) return null;
    
    const previousPosition = previousRating.top10.findIndex(prev => 
      (prev.user_id === student.user_id || prev.user?.id === student.user?.id)
    ) + 1;
    
    if (previousPosition === 0) return 'new'; // –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –≤ —Ç–æ–ø–µ
    if (previousPosition === currentPosition) return null; // –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (previousPosition > currentPosition) return 'up'; // –ø–æ–¥–Ω—è–ª—Å—è
    return 'down'; // –æ–ø—É—Å—Ç–∏–ª—Å—è
  };

  // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∞–ª—å –¥–ª—è —Ç–æ–ø-3
  const getMedal = (position) => {
    switch (position) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return null;
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
  const getPositionClass = (position) => {
    if (position <= 3) return `top-${position}`;
    return 'regular';
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ');

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="rating" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="rating" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="error-container">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={loadRating} className="btn-primary">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem="rating" userRole={user.role} />
      
      <div className="main-content">
        <Topbar
          userName={fullName}
          userRole={user.role}
          pageTitle="–†–µ–π—Ç–∏–Ω–≥"
          onProfileClick={() => navigate('/profile')}
        />

        <div className="rating-container">
          <div className="rating-header">
            <div className="header-top">
              <h1>üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h1>
              <div className="header-controls">
                <button 
                  onClick={loadRating} 
                  className="btn-refresh"
                  disabled={loading}
                  title="–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"
                >
                  {loading ? 'üîÑ' : 'üîÑ'}
                </button>
                <button 
                  onClick={() => setAutoUpdate(!autoUpdate)}
                  className={`btn-auto-update ${autoUpdate ? 'active' : ''}`}
                  title={autoUpdate ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}
                >
                  {autoUpdate ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
                </button>
              </div>
            </div>
            <p className="rating-description">
              –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–µ—Å—Ç–∫–æ–∏–Ω–æ–≤
            </p>
            
            {lastUpdated && (
              <p className="last-updated">
                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastUpdated.toLocaleTimeString('ru-RU')}
                {autoUpdate && <span className="auto-update-indicator"> ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</span>}
              </p>
            )}
            
            {user.role === 'student' && ratingData.currentUser.position && (
              <div className="current-position">
                <span className="position-badge">
                  –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #{ratingData.currentUser.position}
                  {ratingData.currentUser.isInTop10 ? ' üèÜ' : ''}
                </span>
              </div>
            )}
          </div>

          <div className="rating-stats">
            <div className="stat-card">
              <div className="stat-icon">üë•</div>
              <div className="stat-info">
                <div className="stat-number">{ratingData.totalStudents}</div>
                <div className="stat-label">–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">üí∞</div>
              <div className="stat-info">
                <div className="stat-number">
                  {ratingData.top10.reduce((sum, student) => sum + (student.points || 0), 0)}
                </div>
                <div className="stat-label">–ú–æ–Ω–µ—Ç –≤ —Ç–æ–ø-10</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">‚≠ê</div>
              <div className="stat-info">
                <div className="stat-number">
                  {ratingData.top10.length > 0 ? Math.round(ratingData.top10.reduce((sum, student) => sum + (student.points || 0), 0) / ratingData.top10.length) : 0}
                </div>
                <div className="stat-label">–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Ç–æ–ø-10</div>
              </div>
            </div>
            
            {ratingData.top10.length > 0 && (
              <div className="stat-card">
                <div className="stat-icon">üèÜ</div>
                <div className="stat-info">
                  <div className="stat-number">{ratingData.top10[0]?.points || 0}</div>
                  <div className="stat-label">–õ–∏–¥–µ—Ä</div>
                </div>
              </div>
            )}
          </div>

          <div className="rating-table-container">
            {ratingData.top10.length === 0 ? (
              <div className="empty-rating">
                <div className="empty-icon">üìä</div>
                <h3>–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç</h3>
                <p>–°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –º–æ–Ω–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</p>
                <button onClick={loadRating} className="btn-primary">
                  –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
                </button>
              </div>
            ) : (
              <div className="rating-content">
                {/* –¢–æ–ø-10 —Ä–µ–π—Ç–∏–Ω–≥ */}
                <div className="rating-section">
                  <h2 className="section-title">üèÜ –¢–æ–ø-10 –ª–∏–¥–µ—Ä–æ–≤</h2>
                  <div className="rating-table">
                    <div className="table-header">
                      <div className="header-rank">–ú–µ—Å—Ç–æ</div>
                      <div className="header-student">–°—Ç—É–¥–µ–Ω—Ç</div>
                      <div className="header-points">–ú–æ–Ω–µ—Ç—ã</div>
                    </div>

                    <div className="table-body">
                      {ratingData.top10.map((student, index) => {
                        const position = index + 1;
                        const medal = getMedal(position);
                        const isCurrentStudent = isCurrentUser(student);
                        const positionChange = getPositionChange(student, position);

                        return (
                          <div 
                            key={student.id || student.user_id || index} 
                            className={`table-row ${getPositionClass(position)} ${isCurrentStudent ? 'current-user' : ''}`}
                          >
                            <div className="rank-cell">
                              <div className="rank-content">
                                {medal && <span className="medal">{medal}</span>}
                                <span className="rank-number">#{position}</span>
                                {positionChange && (
                                  <span className={`position-change ${positionChange}`}>
                                    {positionChange === 'up' ? '‚ÜóÔ∏è' : positionChange === 'down' ? '‚ÜòÔ∏è' : 'üÜï'}
                                  </span>
                                )}
                              </div>
                            </div>

                            <div className="student-cell">
                              <div className="student-info">
                                <div className="student-avatar">
                                  <span className="avatar-text">
                                    {student.user?.first_name?.[0] || student.user?.username?.[0] || '?'}
                                  </span>
                                </div>
                                <div className="student-details">
                                  <div className="student-name">
                                    {[student.user?.first_name, student.user?.surname]
                                      .filter(Boolean).join(' ') || student.user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç'}
                                  </div>
                                  <div className="student-email">
                                    {student.user?.email || '–ü–æ—á—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                                  </div>
                                </div>
                                {isCurrentStudent && (
                                  <div className="current-user-badge">–≠—Ç–æ –≤—ã!</div>
                                )}
                              </div>
                            </div>

                            <div className="points-cell">
                              <div className="points-content">
                                <span className="points-number">{student.points || 0}</span>
                                <span className="points-icon">ü™ô</span>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>

                {/* –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-10 */}
                {user.role === 'student' && ratingData.currentUser.data && !ratingData.currentUser.isInTop10 && (
                  <div className="rating-section current-user-section">
                    <h3 className="section-title">üìç –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è</h3>
                    <div className="rating-table">
                      <div className="table-body">
                        <div className="table-row current-user highlight">
                          <div className="rank-cell">
                            <div className="rank-content">
                              <span className="rank-number">#{ratingData.currentUser.position}</span>
                            </div>
                          </div>

                          <div className="student-cell">
                            <div className="student-info">
                              <div className="student-avatar">
                                <span className="avatar-text">
                                  {ratingData.currentUser.data.user?.first_name?.[0] || user.first_name?.[0] || '?'}
                                </span>
                              </div>
                              <div className="student-details">
                                <div className="student-name">
                                  {[ratingData.currentUser.data.user?.first_name || user.first_name, 
                                    ratingData.currentUser.data.user?.surname || user.surname]
                                    .filter(Boolean).join(' ') || '–í—ã'}
                                </div>
                                <div className="student-email">
                                  {ratingData.currentUser.data.user?.email || user.email}
                                </div>
                              </div>
                              <div className="current-user-badge">–≠—Ç–æ –≤—ã!</div>
                            </div>
                          </div>

                          <div className="points-cell">
                            <div className="points-content">
                              <span className="points-number">{ratingData.currentUser.data.points || 0}</span>
                              <span className="points-icon">ü™ô</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="position-info">
                      <p>
                        {ratingData.currentUser.position <= ratingData.totalStudents ? (
                          <>–î–æ —Ç–æ–ø-10 –æ—Å—Ç–∞–ª–æ—Å—å {ratingData.top10[9]?.points - (ratingData.currentUser.data.points || 0)} –º–æ–Ω–µ—Ç</>
                        ) : (
                          <>–ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥!</>
                        )}
                      </p>
                    </div>
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–∞–Ω–Ω—ã–º */}
                {!ratingData.hasFullAccess && (
                  <div className="access-notice">
                    <span className="notice-badge">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</span>
                    <p>–ü–æ–∫–∞–∑–∞–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞.</p>
                  </div>
                )}
              </div>
            )}
          </div>

          <div className="rating-footer">
            <div className="info-card">
              <h3>üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã?</h3>
              <ul>
                <li>–ü–æ—Å–µ—â–∞–π—Ç–µ –∑–∞–Ω—è—Ç–∏—è –≤–æ–≤—Ä–µ–º—è</li>
                <li>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</li>
                <li>–ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É—Ä–æ–∫–∞—Ö</li>
                <li>–ü–æ–º–æ–≥–∞–π—Ç–µ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∞–º</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}