import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import CourseImage from '../components/CourseImage';
import { useAuth } from '../contexts/AuthContext';
import { getCourse } from '../services/courseService';
import { getCourseLessons } from '../services/lessonService';
import '../styles/CourseDetailPage.css';
import '../styles/CourseImageStyles.css';
import '../styles/MobileImageFixes.css';
import '../styles/TeacherCoursePage.css'; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏

export default function TeacherCoursePage() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();

  const [course, setCourse] = useState(null);
  const [lessons, setLessons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å
        let courseData = null;
        try {
          courseData = await getCourse(courseId);
          setCourse(courseData);
          console.log('[TeacherCoursePage] Course loaded successfully:', courseData);
        } catch (courseError) {
          console.error('[TeacherCoursePage] Error loading course:', courseError);
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞');
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏
        try {
          const lessonsData = await getCourseLessons(courseId);
          
          // –î–û–ë–ê–í–õ–ï–ù–û: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
          console.log('[TeacherCoursePage] Lessons data received:', lessonsData);
          console.log('[TeacherCoursePage] Lessons data type:', typeof lessonsData);
          console.log('[TeacherCoursePage] Is array:', Array.isArray(lessonsData));
          
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤
          const validLessons = Array.isArray(lessonsData) ? lessonsData : [];
          console.log('[TeacherCoursePage] Valid lessons:', validLessons);
          
          setLessons(validLessons);
        } catch (lessonsError) {
          console.error('[TeacherCoursePage] Error loading lessons:', lessonsError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Ä–æ–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          setLessons([]);
        }
        
      } catch (error) {
        console.error('[TeacherCoursePage] Unexpected error during loading:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞');
      } finally {
        setLoading(false);
      }
    })();
  }, [courseId]);

  const fio = [user.first_name, user.surname, user.patronymic].filter(Boolean).join(' ');

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const formatDate = (dateString) => {
    if (!dateString) return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' –≤ ' + date.toLocaleTimeString().slice(0, 5);
  };

  const getStatusBadge = (lesson) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const today = new Date();
    const lessonDate = lesson.holding_date ? new Date(lesson.holding_date) : null;
    
    if (!lessonDate) return { text: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω', class: 'not-scheduled' };
    if (lessonDate > today) return { text: '–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç', class: 'upcoming' };
    return { text: '–ü—Ä–æ–≤–µ–¥–µ–Ω', class: 'completed' };
  };

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  // –£–¥–∞–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  // –£–¥–∞–ª–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API

  // –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ render
  if (error) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="teacherCourses" userRole={user.role} />
        <div className="main-content">
          <Topbar userName={fio} userRole={user.role} onProfileClick={() => navigate('/profile')} />
          <div className="error-container">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => window.location.reload()}>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
          </div>
        </div>
      </div>
    );
  }

  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  return (
    <div className="app-layout">
      <Sidebar activeItem="teacherCourses" userRole={user.role} />

      <div className="main-content">
        <Topbar
          userName={fio}
          userRole={user.role}
          onProfileClick={() => navigate('/profile')}
        />

        {loading ? (
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞...</p>
          </div>
        ) : (
          <>
            <div className="course-header">
              <div className="course-header-top">
                <button 
                  className="btn-back"
                  onClick={() => navigate('/teacher-courses')}
                >
                  ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–∏–º –∫—É—Ä—Å–∞–º
                </button>
              </div>
              
              {course && (
                <div className="course-main-info">
                  {course.photo?.url && (
                    <CourseImage
                      src={course.photo.url}
                      alt={course.name}
                      className="course-detail-image"
                      placeholder="üìö"
                    />
                  )}
                  
                  <div className="course-content">
                    <h1 className="course-title">{course.name}</h1>
                    <p className="course-description">{course.description}</p>
                    <div className="course-meta">
                      <span className="course-author">üë©‚Äçüè´ {course.author_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                      {course.age_category && (
                        <span className="course-category">üë• {course.age_category}</span>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="lessons-section">
              <div className="lessons-header">
                <h2>–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞</h2>
                {lessons.length > 0 && (
                  <span className="lessons-count">{lessons.length} —É—Ä–æ–∫–æ–≤</span>
                )}
              </div>

              {lessons.length === 0 ? (
                <div className="no-lessons">
                  <div className="empty-icon">üìö</div>
                  <h3>–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤</h3>
                  <p>–£—Ä–æ–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</p>
                </div>
              ) : (
                <div className="lessons-list">
                  {Array.isArray(lessons) && lessons.map((lesson, index) => {
                    const status = getStatusBadge(lesson);
                    
                    return (
                      <div
                        key={lesson.id}
                        className="lesson-card"
                        onClick={() => navigate(`/courses/${courseId}/teacher/lessons/${lesson.id}`)}
                        style={{ cursor: 'pointer' }}
                      >
                        <div className="lesson-number">
                          {index + 1}
                        </div>
                        
                        <div className="lesson-content">
                          <div className="lesson-header">
                            <h3 className="lesson-title">{lesson.name}</h3>
                          </div>
                          
                          <div className="lesson-meta">
                            <span className={`lesson-status ${status.class}`}>
                              {status.text}
                            </span>
                            
                            {lesson.holding_date && (
                              <span className="lesson-date">
                                ÔøΩ {formatDate(lesson.holding_date)}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
}
