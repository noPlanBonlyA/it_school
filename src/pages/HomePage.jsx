import React, { useEffect, useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';

import Sidebar   from '../components/Sidebar';
import Topbar    from '../components/TopBar';
import Schedule  from '../components/Schedule';
import BestCoins from '../components/BestCoin';
import NewsModal from '../components/NewsModal';

import { useAuth }          from '../contexts/AuthContext';
import userService          from '../services/userService';
import { getUserScheduleOptimized } from '../services/scheduleService';
import { createNotificationForStudent } from '../services/notificationService';
import { findStudentByUser, debugAllStudents } from '../services/studentService';

import '../styles/HomePage.css';
import '../styles/Schedule.css';
import '../styles/HomeNews.css';

const API = 'http://localhost:8080/api';

export default function HomePage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [fullUser,  setFull]     = useState(null);
  const [events,    setEv]       = useState([]);
  const [selEvent,  setSel]      = useState(null);
  const [news,      setNews]     = useState([]);
  const [modalItem, setModalItem]= useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (!user) {
      navigate('/login', { replace: true });
      return;
    }
    userService.getMe()
      .then(setFull)
      .catch(() => navigate('/login', { replace: true }));
  }, [user, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  useEffect(() => {
    if (!user) return;
    (async () => {
      try {
        setEv(await getUserScheduleOptimized(user));
      } catch {
        console.error('schedule fetch error');
      }
    })();
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
  useEffect(() => {
    fetch(`${API}/news/`)
      .then(r => r.json())
      .then(arr => {
        const list = Array.isArray(arr) ? arr : (arr.objects || []);
        // –¥–æ–±–∞–≤–ª—è–µ–º image_url, –µ—Å–ª–∏ –µ—Å—Ç—å
        const mapped = list.map(n => ({
          ...n,
          image_url: n.photo?.url || null
        }));
        // —Å–æ—Ä—Ç–∏—Ä—É–µ–º: –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö –ø–æ –¥–∞—Ç–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        mapped.sort((a, b) => {
          if (a.is_pinned && !b.is_pinned) return -1;
          if (!a.is_pinned && b.is_pinned) return 1;
          return new Date(b.created_at) - new Date(a.created_at);
        });
        setNews(mapped);
      })
      .catch(console.error);
  }, []);

  // –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å
  const { labelNextDay, dayEvents } = useMemo(() => {
    if (!events.length) {
      return { labelNextDay: '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π', dayEvents: [] };
    }
    const days = [...new Set(events.map(e => 
      new Date(e.start).setHours(0,0,0,0)
    ))];
    const today = new Date().setHours(0,0,0,0);
    const nextDay = days.filter(d => d >= today).sort()[0];
    return {
      labelNextDay: new Date(nextDay).toLocaleDateString('ru-RU', {
        day: 'numeric', month: 'long', year: 'numeric'
      }),
      dayEvents: events.filter(e => 
        new Date(e.start).setHours(0,0,0,0) === nextDay
      )
    };
  }, [events]);

  // –ü—Ä–µ–ª–æ–∞–¥–µ—Ä
  if (!fullUser) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  const fio = [fullUser.first_name, fullUser.surname]
                .filter(Boolean).join(' ');

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const testProfile = async () => {
    try {
      if (user?.id) {
        const studentProfile = await findStudentByUser(user.id);
        console.log('Student profile test:', studentProfile);
        alert(`–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: ID ${studentProfile?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
      }
    } catch (error) {
      console.error('Profile test error:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
    }
  };

  const testNotification = async () => {
    try {
      if (user?.id) {
        const studentProfile = await findStudentByUser(user.id);
        if (studentProfile?.id) {
          await createNotificationForStudent(
            studentProfile.id, 
            `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${new Date().toLocaleTimeString()}`
          );
          alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        } else {
          alert('–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
      }
    } catch (error) {
      console.error('Error sending test notification:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  const debugStudents = async () => {
    try {
      const students = await debugAllStudents();
      console.log('All students debug:', students);
      alert(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${students.length}. –°–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
    } catch (error) {
      console.error('Debug students error:', error);
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: ${error.message}`);
    }
  };

  return (
    <div className="app-layout">
      <Sidebar activeItem="dashboard" userRole={fullUser.role} />

      <div className="main-content">
        <Topbar
          userName={fio}
          userRole={fullUser.role}
          onBellClick={() => {}}
          onProfileClick={() => navigate('/profile')}
        />

        {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {fullUser?.role === 'student' && (
          <div style={{
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            display: 'flex',
            flexDirection: 'column',
            gap: '10px',
            zIndex: 1000
          }}>
            <button 
              onClick={debugStudents}
              style={{
                background: '#6f42c1',
                color: 'white',
                border: 'none',
                padding: '10px 15px',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            </button>
            <button 
              onClick={testProfile}
              style={{
                background: '#28a745',
                color: 'white',
                border: 'none',
                padding: '10px 15px',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            </button>
            <button 
              onClick={testNotification}
              style={{
                background: '#007bff',
                color: 'white',
                border: 'none',
                padding: '10px 15px',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
            >
              –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
          </div>
        )}

        <section className="cards">
          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="card schedule">
            <h3>–ü–∞—Ä—ã –Ω–∞ {labelNextDay}</h3>
            <Schedule events={dayEvents} onSelect={e => setSel(e)} />
          </div>

          {/* –ù–æ–≤–æ—Å—Ç–∏ */}
          <div className="card news">
            <h3>–ù–æ–≤–æ—Å—Ç–∏</h3>
            {news.length === 0
              ? <p className="empty-text">–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</p>
              : news.map(n => (
                  <div 
                    key={n.id} 
                    className={`news-row ${n.is_pinned ? 'pinned' : ''}`}
                    onClick={() => setModalItem(n)}
                  >
                    {n.image_url && (
                      <img src={n.image_url} alt="" className="news-thumb"/>
                    )}
                    <span className="news-title">{n.name}</span>
                  </div>
                ))
            }
          </div>

          {/* –ë–µ—Å—Ç–∫–æ–∏–Ω—ã */}
          <div className="card events">
            <h3>–ë–µ—Å—Ç–∫–æ–∏–Ω—ã</h3>
            <BestCoins amount={fullUser.points ?? 0} />
          </div>
        </section>

        {/* –ú–æ–¥–∞–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ */}
        <NewsModal item={modalItem} onClose={() => setModalItem(null)} />

        {/* –ú–∏–Ω–∏-–≤–∏–¥–∂–µ—Ç –ø–∞—Ä—ã */}
        {selEvent && (
          <aside className="event-details">
            <button className="close-btn" onClick={() => setSel(null)}>√ó</button>
            
            <div className="event-header">
              <h2>{selEvent.lesson_name}</h2>
              <div className={`status-badge ${selEvent.is_opened ? 'opened' : 'closed'}`}>
                {selEvent.is_opened ? 'üü¢ –û—Ç–∫—Ä—ã—Ç' : 'üî¥ –ó–∞–∫—Ä—ã—Ç'}
              </div>
            </div>

            <div className="event-info">
              <div className="info-item">
                <strong>–ö—É—Ä—Å:</strong> 
                <span>{selEvent.course_name}</span>
              </div>
              
              {selEvent.group_name && (
                <div className="info-item">
                  <strong>–ì—Ä—É–ø–ø–∞:</strong> 
                  <span>üë• {selEvent.group_name}</span>
                </div>
              )}
              
              {selEvent.teacher_name && (
                <div className="info-item">
                  <strong>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong> 
                  <span>üë©‚Äçüè´ {selEvent.teacher_name}</span>
                </div>
              )}
              
              {selEvent.auditorium && (
                <div className="info-item">
                  <strong>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</strong> 
                  <span>üìç {selEvent.auditorium}</span>
                </div>
              )}
              
              <div className="info-item">
                <strong>–í—Ä–µ–º—è:</strong>
                <span>
                  {new Date(selEvent.start_datetime || selEvent.start).toLocaleString('ru-RU',{
                    day:'2-digit', month:'2-digit', year:'numeric',
                    hour:'2-digit', minute:'2-digit'
                  })}
                  {' - '}
                  {new Date(selEvent.end_datetime || selEvent.end).toLocaleTimeString('ru-RU',{
                    hour:'2-digit', minute:'2-digit'
                  })}
                </span>
              </div>
              
              <div className="info-item">
                <strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>
                <span>
                  {(() => {
                    const start = new Date(selEvent.start_datetime || selEvent.start);
                    const end = new Date(selEvent.end_datetime || selEvent.end);
                    const diffMinutes = Math.round((end - start) / (1000 * 60));
                    return `${diffMinutes} –º–∏–Ω—É—Ç`;
                  })()}
                </span>
              </div>
            </div>

            {selEvent.description && (
              <div className="event-description">
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong>
                <p>{selEvent.description}</p>
              </div>
            )}

            {selEvent.is_opened && fullUser.role === 'student' && (
              <div className="event-actions">
                <button 
                  className="btn-primary"
                  onClick={() => {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É—Ä–æ–∫—É
                    if (selEvent.lesson_id && selEvent.course_id) {
                      navigate(`/courses/${selEvent.course_id}/lessons/${selEvent.lesson_id}`);
                    } else {
                      alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    }
                  }}
                >
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É
                </button>
              </div>
            )}
          </aside>
        )}
      </div>
    </div>
  );
}
