import React, { useEffect, useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';

import Sidebar   from '../components/Sidebar';
import Topbar    from '../components/TopBar';
import Schedule  from '../components/Schedule';
import BestCoins from '../components/BestCoin';
import NewsModal from '../components/NewsModal';

import { useAuth }          from '../contexts/AuthContext';
import userService          from '../services/userService';
import { getUserScheduleOptimized } from '../services/scheduleService';
import { createNotificationForStudent } from '../services/notificationService';
import { findStudentByUser, debugAllStudents } from '../services/studentService';
import api from '../api/axiosInstance';

import '../styles/HomePage.css';
import '../styles/Schedule.css';
import '../styles/HomeNews.css';

export default function HomePage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [fullUser,     setFull]        = useState(null);
  const [studentData,  setStudentData] = useState(null);
  const [events,       setEv]          = useState([]);
  const [selEvent,     setSel]         = useState(null);
  const [news,         setNews]        = useState([]);
  const [modalItem,    setModalItem]   = useState(null);
  const [expandedNews, setExpandedNews] = useState(new Set()); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  const [coinsLoading, setCoinsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (!user) {
      navigate('/login', { replace: true });
      return;
    }
    userService.getMe()
      .then(setFull)
      .catch(() => navigate('/login', { replace: true }));
  }, [user, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏
  useEffect(() => {
    if (!user || user.role !== 'student') {
      setCoinsLoading(false);
      return;
    }

    const loadStudentData = async () => {
      try {
        setCoinsLoading(true);
        console.log('[HomePage] Loading student data for coins...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /students/me –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –º–æ–Ω–µ—Ç–∞–º–∏
        const response = await api.get('/students/me');
        console.log('[HomePage] Student data response:', response.data);
        
        setStudentData(response.data);
      } catch (error) {
        console.error('[HomePage] Error loading student data:', error);
        
        // Fallback: –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ findStudentByUser
        try {
          const fallbackData = await findStudentByUser(user.id);
          console.log('[HomePage] Fallback student data:', fallbackData);
          setStudentData(fallbackData);
        } catch (fallbackError) {
          console.error('[HomePage] Fallback also failed:', fallbackError);
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          setStudentData({ points: 0 });
        }
      } finally {
        setCoinsLoading(false);
      }
    };

    loadStudentData();
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  useEffect(() => {
    if (!user) return;
    (async () => {
      try {
        setEv(await getUserScheduleOptimized(user));
      } catch {
        console.error('schedule fetch error');
      }
    })();
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
  useEffect(() => {
    api.get('/news/')
      .then(response => {
        const arr = response.data;
        const list = Array.isArray(arr) ? arr : (arr.objects || []);
        // –¥–æ–±–∞–≤–ª—è–µ–º image_url, –µ—Å–ª–∏ –µ—Å—Ç—å
        const mapped = list.map(n => ({
          ...n,
          image_url: n.photo?.url || null
        }));
        // —Å–æ—Ä—Ç–∏—Ä—É–µ–º: –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö –ø–æ –¥–∞—Ç–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        mapped.sort((a, b) => {
          if (a.is_pinned && !b.is_pinned) return -1;
          if (!a.is_pinned && b.is_pinned) return 1;
          return new Date(b.created_at) - new Date(a.created_at);
        });
        setNews(mapped);
      })
      .catch(console.error);
  }, []);

  // –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å
  const { labelNextDay, dayEvents } = useMemo(() => {
    if (!events.length) {
      return { labelNextDay: '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π', dayEvents: [] };
    }
    const days = [...new Set(events.map(e => 
      new Date(e.start).setHours(0,0,0,0)
    ))];
    const today = new Date().setHours(0,0,0,0);
    const nextDay = days.filter(d => d >= today).sort()[0];
    return {
      labelNextDay: new Date(nextDay).toLocaleDateString('ru-RU', {
        day: 'numeric', month: 'long', year: 'numeric'
      }),
      dayEvents: events.filter(e => 
        new Date(e.start).setHours(0,0,0,0) === nextDay
      )
    };
  }, [events]);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  const getCoinsAmount = () => {
    if (user?.role === 'student') {
      if (coinsLoading) return '...';
      return studentData?.points ?? 0;
    }
    // –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤ –º–æ–Ω–µ—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    return fullUser?.points ?? 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  const toggleNewsExpansion = (newsId, event) => {
    event.stopPropagation();
    setExpandedNews(prev => {
      const newSet = new Set(prev);
      if (newSet.has(newsId)) {
        newSet.delete(newsId);
      } else {
        newSet.add(newsId);
      }
      return newSet;
    });
  };

  // –ü—Ä–µ–ª–æ–∞–¥–µ—Ä
  if (!fullUser) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  const fio = [fullUser.first_name, fullUser.surname]
                .filter(Boolean).join(' ');

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const testProfile = async () => {
    try {
      if (user?.id) {
        const studentProfile = await findStudentByUser(user.id);
        console.log('Student profile test:', studentProfile);
        alert(`–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: ID ${studentProfile?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
      }
    } catch (error) {
      console.error('Profile test error:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
    }
  };

  const testNotification = async () => {
    try {
      if (user?.id) {
        const studentProfile = await findStudentByUser(user.id);
        if (studentProfile?.id) {
          await createNotificationForStudent(
            studentProfile.id, 
            `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${new Date().toLocaleTimeString()}`
          );
          alert('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        } else {
          alert('–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
      }
    } catch (error) {
      console.error('Error sending test notification:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  const debugStudents = async () => {
    try {
      const students = await debugAllStudents();
      console.log('All students debug:', students);
      alert(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${students.length}. –°–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
    } catch (error) {
      console.error('Debug students error:', error);
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: ${error.message}`);
    }
  };

  // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç
  const testCoinsReload = async () => {
    try {
      setCoinsLoading(true);
      const response = await api.get('/students/me');
      console.log('Coins reload test:', response.data);
      setStudentData(response.data);
      alert(`–ú–æ–Ω–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${response.data.points}`);
    } catch (error) {
      console.error('Coins reload error:', error);
      alert(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç: ${error.message}`);
    } finally {
      setCoinsLoading(false);
    }
  };

  return (
    <div className="app-layout">
      <Sidebar activeItem="dashboard" userRole={fullUser.role} />

      <div className="main-content">
        <Topbar
          userName={fio}
          userRole={fullUser.role}
          pageTitle="–ì–ª–∞–≤–Ω–∞—è"
          onBellClick={() => {}}
          onProfileClick={() => navigate('/profile')}
        />

        {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {fullUser?.role === 'student' && (
          <div className="debug-buttons">
            <button 
              onClick={debugStudents}
              className="debug-btn purple"
            >
              –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            </button>
            <button 
              onClick={testProfile}
              className="debug-btn success"
            >
              –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            </button>
            <button 
              onClick={testNotification}
              className="debug-btn info"
            >
              –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
            <button 
              onClick={testCoinsReload}
              className="debug-btn warning"
            >
              –û–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
            </button>
          </div>
        )}

        <section className="cards">
          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ */}
          <div 
            className="card schedule clickable-card" 
            onClick={() => navigate('/schedule')}
            title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
          >
            <h3>
              –ü–∞—Ä—ã –Ω–∞ {labelNextDay}
              <span className="card-nav-icon" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é">üìÖ</span>
            </h3>
            <Schedule events={dayEvents} onSelect={e => {
              // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç–æ –∂–µ —Å–æ–±—ã—Ç–∏–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
              if (selEvent && selEvent.id === e.id) {
                setSel(null);
              } else {
                setSel(e);
              }
            }} onCardClick={(event) => {
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
              event.stopPropagation();
            }} />
            
            {/* –ú–∏–Ω–∏-–≤–∏–¥–∂–µ—Ç –ø–∞—Ä—ã - —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
            {selEvent && (
              <div className="event-details">
                <button className="close-btn" onClick={() => setSel(null)}>√ó</button>
                
                <div className="event-header">
                  <h2>{selEvent.lesson_name}</h2>
                  <div className={`status-badge ${selEvent.is_opened ? 'opened' : 'closed'}`}>
                    {selEvent.is_opened ? 'üü¢ –û—Ç–∫—Ä—ã—Ç' : 'üî¥ –ó–∞–∫—Ä—ã—Ç'}
                  </div>
                </div>

                <div className="event-info">
                  <div className="info-item">
                    <strong>–ö—É—Ä—Å:</strong> 
                    <span>{selEvent.course_name}</span>
                  </div>
                  
                  {selEvent.group_name && (
                    <div className="info-item">
                      <strong>–ì—Ä—É–ø–ø–∞:</strong> 
                      <span>üë• {selEvent.group_name}</span>
                    </div>
                  )}
                  
                  {selEvent.teacher_name && (
                    <div className="info-item">
                      <strong>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong> 
                      <span>üë©‚Äçüè´ {selEvent.teacher_name}</span>
                    </div>
                  )}
                  
                  {selEvent.auditorium && (
                    <div className="info-item">
                      <strong>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</strong> 
                      <span>üìç {selEvent.auditorium}</span>
                    </div>
                  )}
                  
                  <div className="info-item">
                    <strong>–í—Ä–µ–º—è:</strong>
                    <span>
                      {new Date(selEvent.start_datetime || selEvent.start).toLocaleString('ru-RU',{
                        day:'2-digit', month:'2-digit', year:'numeric',
                        hour:'2-digit', minute:'2-digit'
                      })}
                      {' - '}
                      {new Date(selEvent.end_datetime || selEvent.end).toLocaleTimeString('ru-RU',{
                        hour:'2-digit', minute:'2-digit'
                      })}
                    </span>
                  </div>
                  
                  <div className="info-item">
                    <strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>
                    <span>
                      {(() => {
                        const start = new Date(selEvent.start_datetime || selEvent.start);
                        const end = new Date(selEvent.end_datetime || selEvent.end);
                        const diffMinutes = Math.round((end - start) / (1000 * 60));
                        return `${diffMinutes} –º–∏–Ω—É—Ç`;
                      })()}
                    </span>
                  </div>
                </div>

                {selEvent.description && (
                  <div className="event-description">
                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong>
                    <p>{selEvent.description}</p>
                  </div>
                )}

                {selEvent.is_opened && fullUser.role === 'student' && (
                  <div className="event-actions">
                    <button 
                      className="btn-primary"
                      onClick={() => {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É—Ä–æ–∫—É
                        if (selEvent.lesson_id && selEvent.course_id) {
                          navigate(`/courses/${selEvent.course_id}/lessons/${selEvent.lesson_id}`);
                        } else {
                          alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                        }
                      }}
                    >
                      –ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* –ù–æ–≤–æ—Å—Ç–∏ - –≤—Ç–æ—Ä–æ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
          <div className="card news">
            <h3>–ù–æ–≤–æ—Å—Ç–∏</h3>
            <div className="news-list">
              <div className="news-scroll-container">
                {news.length === 0
                  ? <p className="empty-text">–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</p>
                  : news.map(n => (
                      <div 
                        key={n.id} 
                        className={`news-row ${n.is_pinned ? 'pinned' : ''} ${expandedNews.has(n.id) ? 'expanded' : ''} ${!n.image_url ? 'no-image' : ''}`}
                        onClick={(event) => toggleNewsExpansion(n.id, event)}
                      >
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å */}
                        {n.image_url && (
                          <img src={n.image_url} alt={n.name} className="news-thumb"/>
                        )}
                        
                        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏ */}
                        <div className="news-content">
                          <h4 className="news-title">{n.name}</h4>
                          <div className="news-date">
                            {new Date(n.created_at).toLocaleDateString('ru-RU', {
                              day: 'numeric',
                              month: 'long',
                              year: 'numeric'
                            })}
                          </div>
                          
                          {/* –û–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏) */}
                          {n.description && (
                            <div className="news-description">
                              {n.description.split('\n').map((paragraph, index) => (
                                paragraph.trim() && (
                                  <p key={index} style={{ margin: '0 0 12px 0' }}>
                                    {paragraph}
                                  </p>
                                )
                              ))}
                            </div>
                          )}
                          
                          {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
                          <div className="news-expand-btn">
                            {expandedNews.has(n.id) ? (
                              <>
                                <span>‚ñ≤</span>
                                <span>–°–≤–µ—Ä–Ω—É—Ç—å</span>
                              </>
                            ) : (
                              <>
                                <span>‚ñº</span>
                                <span>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                }
              </div>
            </div>
          </div>

          {/* –ë–µ—Å—Ç–∫–æ–∏–Ω—ã - —Ç—Ä–µ—Ç—å–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
          <div 
            className="card coins clickable-card" 
            onClick={() => navigate('/rating')}
            title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
          >
            <div className="bestcoins-header">
              <h3>
                –ë–µ—Å—Ç–∫–æ–∏–Ω—ã
                <span className="card-nav-icon" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤">üèÜ</span>
              </h3>
              {user?.role === 'student' && (
                <div className="coins-info">
                  {coinsLoading ? (
                    <span className="coins-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                  ) : (
                    <div className="coins-details">
                      <span className="coins-source">–î–∞–Ω–Ω—ã–µ –∏–∑: /students/me</span>
                      <span className="coins-updated">
                        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                      </span>
                    </div>
                  )}
                </div>
              )}
            </div>
            <BestCoins 
              amount={getCoinsAmount()} 
              loading={user?.role === 'student' ? coinsLoading : false}
            />
          </div>
        </section>

        {/* –ú–æ–¥–∞–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ */}
        <NewsModal item={modalItem} onClose={() => setModalItem(null)} />
      </div>
    </div>
  );
}
