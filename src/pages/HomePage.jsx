import React, { useEffect, useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';

import Sidebar   from '../components/Sidebar';
import Topbar    from '../components/TopBar';
import Schedule  from '../components/Schedule';
import BestCoins from '../components/BestCoin';
import NewsModal from '../components/NewsModal';
import EventModal from '../components/EventModal';

import { useAuth }          from '../contexts/AuthContext';
import userService          from '../services/userService';
import { getUserScheduleOptimized } from '../services/scheduleService';
import { findStudentByUser } from '../services/studentService';
import api from '../api/axiosInstance';

import '../styles/HomePage.css';
import '../styles/Schedule.css';
import '../styles/HomeNews.css';

export default function HomePage() {
  const navigate = useNavigate();
  const { user } = useAuth();

  const [fullUser,     setFull]        = useState(null);
  const [studentData,  setStudentData] = useState(null);
  const [events,       setEv]          = useState([]);
  const [selEvent,     setSel]         = useState(null);
  const [news,         setNews]        = useState([]);
  const [modalItem,    setModalItem]   = useState(null);
  const [coinsLoading, setCoinsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (!user) {
      navigate('/login', { replace: true });
      return;
    }
    userService.getMe()
      .then(setFull)
      .catch(() => navigate('/login', { replace: true }));
  }, [user, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏
  useEffect(() => {
    if (!user || user.role !== 'student') {
      setCoinsLoading(false);
      return;
    }

    const loadStudentData = async () => {
      try {
        setCoinsLoading(true);
        console.log('[HomePage] Loading student data for coins...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /students/me –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –º–æ–Ω–µ—Ç–∞–º–∏
        const response = await api.get('/students/me');
        console.log('[HomePage] Student data response:', response.data);
        
        setStudentData(response.data);
      } catch (error) {
        console.error('[HomePage] Error loading student data:', error);
        
        // Fallback: –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ findStudentByUser
        try {
          const fallbackData = await findStudentByUser(user.id);
          console.log('[HomePage] Fallback student data:', fallbackData);
          setStudentData(fallbackData);
        } catch (fallbackError) {
          console.error('[HomePage] Fallback also failed:', fallbackError);
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          setStudentData({ points: 0 });
        }
      } finally {
        setCoinsLoading(false);
      }
    };

    loadStudentData();
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  useEffect(() => {
    if (!user) return;
    (async () => {
      try {
        setEv(await getUserScheduleOptimized(user));
      } catch {
        console.error('schedule fetch error');
      }
    })();
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
  useEffect(() => {
    api.get('/news/')
      .then(response => {
        const arr = response.data;
        const list = Array.isArray(arr) ? arr : (arr.objects || []);
        // –¥–æ–±–∞–≤–ª—è–µ–º image_url, –µ—Å–ª–∏ –µ—Å—Ç—å
        const mapped = list.map(n => ({
          ...n,
          image_url: n.photo?.url || null
        }));
        // —Å–æ—Ä—Ç–∏—Ä—É–µ–º: –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö –ø–æ –¥–∞—Ç–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        mapped.sort((a, b) => {
          if (a.is_pinned && !b.is_pinned) return -1;
          if (!a.is_pinned && b.is_pinned) return 1;
          return new Date(b.created_at) - new Date(a.created_at);
        });
        setNews(mapped);
      })
      .catch(console.error);
  }, []);

  // –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å
  const { scheduleTitle, dayEvents } = useMemo(() => {
    if (!events.length) {
      return { scheduleTitle: '–¢—É—Ç –±—É–¥—É—Ç –ø–∞—Ä—ã', dayEvents: [] };
    }
    const days = [...new Set(events.map(e => 
      new Date(e.start).setHours(0,0,0,0)
    ))];
    const today = new Date().setHours(0,0,0,0);
    const nextDay = days.filter(d => d >= today).sort()[0];
    const nextDayFormatted = new Date(nextDay).toLocaleDateString('ru-RU', {
      day: 'numeric', month: 'long', year: 'numeric'
    });
    return {
      scheduleTitle: `–ü–∞—Ä—ã –Ω–∞ ${nextDayFormatted}`,
      dayEvents: events.filter(e => 
        new Date(e.start).setHours(0,0,0,0) === nextDay
      )
    };
  }, [events]);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  const getCoinsAmount = () => {
    if (user?.role === 'student') {
      if (coinsLoading) return '...';
      return studentData?.points ?? 0;
    }
    // –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤ –º–æ–Ω–µ—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    return fullUser?.points ?? 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π - —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const toggleNewsExpansion = (newsId, event) => {
    event.stopPropagation();
    const newsItem = news.find(n => n.id === newsId);
    if (newsItem) {
      setModalItem(newsItem);
    }
  };

  // –ü—Ä–µ–ª–æ–∞–¥–µ—Ä
  if (!fullUser) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  const fio = [fullUser.first_name, fullUser.surname]
                .filter(Boolean).join(' ');

  return (
    <div className="app-layout">
      <Sidebar activeItem="dashboard" userRole={fullUser.role} />

      <div className="main-content">
        <Topbar
          userName={fio}
          userRole={fullUser.role}
          pageTitle="–ì–ª–∞–≤–Ω–∞—è"
          onBellClick={() => {}}
          onProfileClick={() => navigate('/profile')}
        />



        <section className="cards">
          {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ */}
          <div className="card schedule">
            <div className="card-header">
              <h3>{scheduleTitle}</h3>
              <button 
                className="btn-details"
                onClick={() => navigate('/schedule')}
                title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
              >
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </button>
            </div>
            <Schedule events={dayEvents} onSelect={e => {
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è
              setSel(e);
            }} onCardClick={(event) => {
              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
              event.stopPropagation();
            }} />
          </div>

          {/* –ù–æ–≤–æ—Å—Ç–∏ - –≤—Ç–æ—Ä–æ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
          <div className="card news">
            <h3>–ù–æ–≤–æ—Å—Ç–∏</h3>
            <div className="news-list">
              <div className="news-scroll-container">
                {news.length === 0
                  ? <p className="empty-text">–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</p>
                  : news.map(n => (
                      <div 
                        key={n.id} 
                        className={`news-row ${n.is_pinned ? 'pinned' : ''} ${!n.image_url ? 'no-image' : ''}`}
                        onClick={(event) => toggleNewsExpansion(n.id, event)}
                      >
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å */}
                        {n.image_url && (
                          <img src={n.image_url} alt={n.name} className="news-thumb"/>
                        )}
                        
                        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏ */}
                        <div className="news-content">
                          <h4 className="news-title">{n.name}</h4>
                          <div className="news-date">
                            {new Date(n.created_at).toLocaleDateString('ru-RU', {
                              day: 'numeric',
                              month: 'long',
                              year: 'numeric'
                            })}
                          </div>
                          
                          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
                          <div className="news-expand-btn">
                            <span>üì∞</span>
                            <span>–ß–∏—Ç–∞—Ç—å</span>
                          </div>
                        </div>
                      </div>
                    ))
                }
              </div>
            </div>
          </div>

          {/* –ê–π—Ç–∏—à–∫–∏ - —Ç—Ä–µ—Ç—å–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
          <div className="card coins">
            <div className="card-header">
              <h3>–ê–π—Ç–∏—à–∫–∏</h3>
              <button 
                className="btn-details"
                onClick={() => navigate('/rating')}
                title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
              >
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </button>
            </div>

            <BestCoins 
              amount={getCoinsAmount()} 
              loading={user?.role === 'student' ? coinsLoading : false}
            />
          </div>

        </section>

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        <NewsModal item={modalItem} onClose={() => setModalItem(null)} />
        <EventModal 
          event={selEvent} 
          onClose={() => setSel(null)} 
          userRole={fullUser.role}
        />
      </div>
    </div>
  );
}
