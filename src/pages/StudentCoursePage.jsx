// src/pages/StudentCoursePage.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import { useAuth } from '../contexts/AuthContext';
import { getCourse } from '../services/courseService';
import { getCourseLessons } from '../services/courseService';
import { getUserSchedule } from '../services/scheduleService';
import '../styles/CourseDetailPage.css';

export default function StudentCoursePage() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();

  const [course, setCourse] = useState(null);
  const [lessons, setLessons] = useState([]);
  const [schedule, setSchedule] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('[StudentCourse] Loading course data for courseId:', courseId);
        
        // –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        try {
          const courseData = await getCourse(courseId);
          setCourse(courseData);
          console.log('[StudentCourse] Course loaded successfully:', courseData);
        } catch (courseError) {
          console.error('[StudentCourse] Error loading course:', courseError);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
        try {
          const lessonsData = await getCourseLessons(courseId);
          setLessons(lessonsData || []);
          console.log('[StudentCourse] Lessons loaded:', lessonsData?.length || 0);
        } catch (lessonsError) {
          console.error('[StudentCourse] Error loading lessons:', lessonsError);
          setLessons([]);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Ä–æ–∫–æ–≤
        try {
          const scheduleData = await getUserSchedule(user);
          setSchedule(scheduleData || []);
          console.log('[StudentCourse] Schedule loaded:', scheduleData?.length || 0);
        } catch (scheduleError) {
          console.error('[StudentCourse] Error loading schedule:', scheduleError);
          setSchedule([]);
        }
        
      } catch (error) {
        console.error('[StudentCourse] Critical error loading course data:', error);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setLoading(false);
      }
    })();
  }, [courseId, user]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É—Ä–æ–∫–∞
  const getLessonScheduleInfo = (lessonId) => {
    return schedule.find(item => item.lesson_id === lessonId);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  const isLessonOpened = (lessonId) => {
    const scheduleItem = getLessonScheduleInfo(lessonId);
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã–º
    return scheduleItem ? scheduleItem.is_opened : true;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getLessonStatus = (lessonId) => {
    const scheduleItem = getLessonScheduleInfo(lessonId);
    
    if (!scheduleItem) return { text: '–î–æ—Å—Ç—É–ø–µ–Ω', class: 'available' };
    if (!scheduleItem.is_opened) return { text: '–ó–∞–∫—Ä—ã—Ç', class: 'closed' };
    if (scheduleItem.is_completed) return { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', class: 'completed' };
    
    return { text: '–î–æ—Å—Ç—É–ø–µ–Ω', class: 'available' };
  };

  const handleLessonClick = (lessonId) => {
    console.log('[StudentCourse] Opening lesson:', lessonId);
    navigate(`/courses/${courseId}/lessons/${lessonId}`);
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ');

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="studentCourses" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="studentCourses" userRole={user.role} />
        <div className="main-content">
          <Topbar
            userName={fullName}
            userRole={user.role}
            onProfileClick={() => navigate('/profile')}
          />
          <div className="access-denied">
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>{error}</p>
            <button 
              onClick={() => navigate('/courses')} 
              className="btn-back"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem="studentCourses" userRole={user.role} />
      <div className="main-content">
        <Topbar
          userName={fullName}
          userRole={user.role}
          onProfileClick={() => navigate('/profile')}
        />

        <div className="course-header">
          <button 
            className="btn-back"
            onClick={() => navigate('/courses')}
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
          </button>
          
          {course && (
            <>
              <div className="course-info">
                <h1>{course.name}</h1>
                <p className="course-description">{course.description}</p>
                <div className="course-meta">
                  <span className="course-author">–ê–≤—Ç–æ—Ä: {course.author_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  {course.age_category && (
                    <span className="course-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {course.age_category}</span>
                  )}
                </div>
              </div>
              
              {course.photo?.url && (
                <div className="course-image">
                  <img 
                    src={course.photo.url.startsWith('http') 
                      ? course.photo.url 
                      : `${window.location.protocol}//${window.location.hostname}:8080${course.photo.url}`
                    } 
                    alt={course.name} 
                  />
                </div>
              )}
            </>
          )}
        </div>

        <div className="lessons-section">
          <h2>–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞</h2>
          
          {lessons.length === 0 ? (
            <div className="no-lessons">
              <div className="empty-icon">üìö</div>
              <h3>–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤</h3>
              <p>–£—Ä–æ–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º</p>
            </div>
          ) : (
            <div className="lessons-list">
              {lessons.map((lesson, index) => {
                const status = getLessonStatus(lesson.id);
                const isOpen = isLessonOpened(lesson.id);
                
                return (
                  <div 
                    key={lesson.id} 
                    className="lesson-item"
                    onClick={() => handleLessonClick(lesson.id)}
                  >
                    <div className="lesson-left">
                      <div className="lesson-number">
                        {index + 1}
                      </div>
                      <div className="lesson-info">
                        <h3 className="lesson-title">{lesson.name}</h3>
                        {lesson.description && (
                          <p className="lesson-description">{lesson.description}</p>
                        )}
                        <div className="lesson-meta">
                          <span className={`lesson-status ${status.class}`}>
                            {status.text}
                          </span>
                          {lesson.holding_date && (
                            <span className="lesson-date">
                              {new Date(lesson.holding_date).toLocaleDateString()}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    <div className="lesson-right">
                      <div className="lesson-arrow">‚Üí</div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
