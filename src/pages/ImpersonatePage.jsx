// src/pages/ImpersonatePage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { getAllUsers } from '../services/userService';
import { impersonateUser } from '../services/authService';
import SmartTopBar from '../components/SmartTopBar';
import Sidebar from '../components/Sidebar';
import ConfirmModal from '../components/ConfirmModal';
import { useConfirm } from '../hooks/useConfirm';
import '../styles/ImpersonatePage.css';

export default function ImpersonatePage() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { confirmState, showConfirm } = useConfirm();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [users, setUsers] = useState([]);
  const [search, setSearch] = useState('');
  const [filtered, setFiltered] = useState([]);
  const [loading, setLoading] = useState(true);
  const [impersonating, setImpersonating] = useState(false);
  const [selectedRole, setSelectedRole] = useState('all');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  useEffect(() => {
    if (!user || user.role !== 'superadmin') {
      navigate('/');
      return;
    }
  }, [user, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    loadUsers();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    let result = users;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    if (selectedRole !== 'all') {
      result = result.filter(u => u.role === selectedRole);
    }

    // –ü–æ–∏—Å–∫ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    if (search.trim()) {
      const searchLower = search.toLowerCase().trim();
      result = result.filter(u => {
        const username = (u.username || '').toLowerCase();
        const email = (u.email || '').toLowerCase();
        const phone = (u.phone_number || '').toLowerCase();
        const fio = [u.first_name, u.surname, u.patronymic]
          .filter(Boolean)
          .join(' ')
          .toLowerCase();
        
        return username.includes(searchLower) ||
               email.includes(searchLower) ||
               phone.includes(searchLower) ||
               fio.includes(searchLower);
      });
    }

    setFiltered(result);
  }, [users, search, selectedRole]);

  const loadUsers = async () => {
    try {
      setLoading(true);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
      const allUsers = [];
      for (let offset = 0; ; offset += 100) {
        const response = await getAllUsers({ limit: 100, offset });
        const users = Array.isArray(response) ? response : (response?.objects || []);
        allUsers.push(...users);
        if (users.length < 100) break;
      }
      setUsers(allUsers);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleImpersonate = async (userId, userName) => {
    const confirmed = await showConfirm({
      title: "üé≠ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥",
      message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "${userName}"?`,
      confirmText: "–í–æ–π—Ç–∏",
      cancelText: "–û—Ç–º–µ–Ω–∞",
      type: "warning"
    });

    if (!confirmed) return;

    try {
      setImpersonating(true);
      await impersonateUser(userId);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      window.location.href = '/';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', error);
      
      await showConfirm({
        title: "‚ùå –û—à–∏–±–∫–∞",
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        confirmText: "OK",
        cancelText: "",
        type: "danger"
      });
    } finally {
      setImpersonating(false);
    }
  };

  const getRoleDisplayName = (role) => {
    const roleNames = {
      'student': '–°—Ç—É–¥–µ–Ω—Ç',
      'teacher': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'superadmin': '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roleNames[role] || role;
  };

  const getRoleColor = (role) => {
    const colors = {
      'student': '#10b981',
      'teacher': '#3b82f6',
      'admin': '#f59e0b',
      'superadmin': '#ef4444'
    };
    return colors[role] || '#6b7280';
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const getUserDisplayName = (userData) => {
    const parts = [userData.first_name, userData.surname].filter(Boolean);
    return parts.length > 0 ? parts.join(' ') : userData.username;
  };

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="impersonate" userRole={user?.role} />
        <div className="main-content">
          <SmartTopBar pageTitle="–ú–∞–≥–∏—è" />
          <div className="impersonate-page">
            <div className="loading-spinner">
              <div className="spinner"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem="impersonate" userRole={user?.role} />
      <div className="main-content">
        <SmartTopBar pageTitle="–ú–∞–≥–∏—è" />
        
        <div className="impersonate-page">
          <div className="page-header">
            <h1>–ú–∞–≥–∏—è</h1>
            <p>–í—Ö–æ–¥ –ø–æ–¥ –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</p>
          </div>

          <div className="controls">
            <div className="search-container">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, email, —Ç–µ–ª–µ—Ñ–æ–Ω—É..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="search-input"
              />
              <div className="search-icon">üîç</div>
            </div>

            <div className="role-filter">
              <select
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="role-select"
              >
                <option value="all">–í—Å–µ —Ä–æ–ª–∏</option>
                <option value="student">–°—Ç—É–¥–µ–Ω—Ç—ã</option>
                <option value="teacher">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</option>
                <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
                <option value="superadmin">–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
              </select>
            </div>
          </div>

          <div className="users-stats">
            <div className="stat-item">
              <span className="stat-number">{filtered.length}</span>
              <span className="stat-label">–Ω–∞–π–¥–µ–Ω–æ</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{users.length}</span>
              <span className="stat-label">–≤—Å–µ–≥–æ</span>
            </div>
          </div>

          <div className="users-grid">
            {filtered.length > 0 ? (
              filtered.map(u => (
                <div key={u.id} className="user-card">
                  <div className="user-avatar">
                    {u.photo?.url ? (
                      <img src={u.photo.url} alt={getUserDisplayName(u)} />
                    ) : (
                      <div className="avatar-placeholder">
                        {getUserDisplayName(u).charAt(0).toUpperCase()}
                      </div>
                    )}
                  </div>

                  <div className="user-info">
                    <h3 className="user-name">{getUserDisplayName(u)}</h3>
                    <p className="user-username">@{u.username}</p>
                    
                    <div className="user-details">
                      <div className="detail-item">
                        <span className="detail-label">Email:</span>
                        <span className="detail-value">{u.email}</span>
                      </div>
                      
                      <div className="detail-item">
                        <span className="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                        <span className="detail-value">{u.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                      </div>
                      
                      <div className="detail-item">
                        <span className="detail-label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</span>
                        <span className="detail-value">{formatDate(u.birth_date)}</span>
                      </div>
                    </div>

                    <div className="user-role">
                      <span 
                        className="role-badge"
                        style={{ backgroundColor: getRoleColor(u.role) }}
                      >
                        {getRoleDisplayName(u.role)}
                      </span>
                    </div>
                  </div>

                  <div className="user-actions">
                    <button
                      onClick={() => handleImpersonate(u.id, getUserDisplayName(u))}
                      disabled={impersonating || u.id === user?.id}
                      className="impersonate-btn"
                    >
                      {impersonating ? (
                        <>
                          <div className="btn-spinner"></div>
                          –í—Ö–æ–∂—É...
                        </>
                      ) : (
                        <>
                          üé≠ –í–æ–π—Ç–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                        </>
                      )}
                    </button>
                    
                    {u.id === user?.id && (
                      <span className="current-user-badge">
                        –≠—Ç–æ –≤—ã
                      </span>
                    )}
                  </div>
                </div>
              ))
            ) : !loading && (
              <div className="no-results">
                <div className="no-results-icon">üîç</div>
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä</p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <ConfirmModal 
        isOpen={confirmState.isOpen}
        onClose={confirmState.onCancel}
        onConfirm={confirmState.onConfirm}
        title={confirmState.title}
        message={confirmState.message}
        confirmText={confirmState.confirmText}
        cancelText={confirmState.cancelText}
        type={confirmState.type}
      />
    </div>
  );
}
