// src/pages/LoginPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate }            from 'react-router-dom';
import { useAuth }                from '../contexts/AuthContext';
import Toast                      from '../components/Toast';
import '../styles/LoginPage.css';

export default function LoginPage() {
  const navigate = useNavigate();
  const { user, login } = useAuth();

  const [username, setUsername]   = useState('');
  const [password, setPassword]   = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [toast, setToast]         = useState({ message: '', type: 'error' });

  // –ï—Å–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã ‚Äî —Å—Ä–∞–∑—É —Ä–µ–¥–∏—Ä–µ–∫—Ç
  useEffect(() => {
    if (user) {
      navigate('/home', { replace: true });
    }
  }, [user, navigate]);

  const handleSubmit = async e => {
    e.preventDefault();
    setToast({ message: '', type: 'error' });
    try {
      await login(username, password);
      navigate('/home', { replace: true });
    } catch (err) {
      let msg = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (!err.response)              msg = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ CORS.';
      else if (err.response.status === 404) msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      else if (err.response.status === 401) msg = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
      else {
        const detail = err.response.data.detail;
        if (Array.isArray(detail))    msg = detail.map(i => i.msg).join('; ');
        else if (typeof detail === 'string') msg = detail;
        else                          msg = err.response.data.detail || err.message;
      }
      setToast({ message: msg, type: 'error' });
    }
  };

  const handleForgotPassword = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    navigate('/forgot-password');
  };

  return (
    <div className="login-container">
      <div className="login-background" />
      <div className="login-box">
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast({ message: '', type: 'error' })}
        />

        <h1 className="login-title">–í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
        <form className="login-form" onSubmit={handleSubmit}>

          <div className="input-group">
            <label htmlFor="login-username">–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω</label>
            <input
              id="login-username"
              type="text"
              className="input-control"
              placeholder="ivan_ivanov@gmail.com"
              value={username}
              onChange={e => setUsername(e.target.value)}
              required
            />
          </div>

          <div className="input-group">
            <div className="password-header">
              <label htmlFor="login-password">–ü–∞—Ä–æ–ª—å</label>
              <button 
                type="button" 
                className="forgot-password-link"
                onClick={handleForgotPassword}
              >
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </button>
            </div>
            <div className="password-wrapper">
              <input
                id="login-password"
                type={showPassword ? 'text' : 'password'}
                className="input-control"
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowPassword(v => !v)}
                aria-label={showPassword ? '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'}
              >
                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
              </button>
            </div>
          </div>

          <button type="submit" className="submit-btn">
            –í–æ–π—Ç–∏
          </button>
        </form>
      </div>
    </div>
  );
}
