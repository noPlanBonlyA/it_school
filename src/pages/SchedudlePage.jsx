/*  src/pages/SchedulePage.jsx  */

import React, { useState, useEffect, useMemo, useRef } from 'react'
import { useNavigate } from 'react-router-dom';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import listPlugin from '@fullcalendar/list'
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import SmartTopBar from '../components/SmartTopBar';
import Schedule from '../components/Schedule';
import EventModal from '../components/EventModal';
import ScheduleFilterModal from '../components/ScheduleFilterModal';
import { useAuth } from '../contexts/AuthContext';
import { getUserScheduleOptimized } from '../services/scheduleService';
import { getFilteredSchedule, getFilterOptions, formatFiltersText } from '../services/scheduleFilterService';

import '../styles/SchedulePage.css';

// ========== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –û–®–ò–ë–û–ö POPOVER ==========
// –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ FullCalendar Popover –Ω–∞ —Å–∞–º–æ–º —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ
if (typeof window !== 'undefined') {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  const originalError = console.error;
  const originalWarn = console.warn;
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º console.error
  console.error = function(...args) {
    const message = args.join(' ');
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å getBoundingClientRect –∏ Popover
    if (message.includes('getBoundingClientRect') || 
        message.includes('Popover') ||
        message.includes('updateSize') ||
        message.includes('componentDidMount')) {
      return; // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º
    }
    originalError.apply(console, args);
  };

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  window.addEventListener('error', function(event) {
    if (event.error?.message?.includes('getBoundingClientRect') ||
        event.error?.message?.includes('Popover') ||
        event.error?.message?.includes('updateSize')) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      return false;
    }
  }, true);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
  window.addEventListener('unhandledrejection', function(event) {
    if (event.reason?.message?.includes('getBoundingClientRect') ||
        event.reason?.message?.includes('Popover')) {
      event.preventDefault();
      event.stopPropagation();
      return false;
    }
  }, true);
}
// ========== –ö–û–ù–ï–¶ –ó–ê–ì–õ–£–®–ö–ò ==========
// ‚ñº –í–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞:
// ---------- –¶–≤–µ—Ç –ø–æ –∫—É—Ä—Å—É/–≥—Ä—É–ø–ø–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ) ----------
const PALETTE = [
  '#3B82F6', '#10B981', '#F59E0B', '#EF4444',
  '#8B5CF6', '#06B6D4', '#A855F7', '#22C55E',
  '#E11D48', '#14B8A6'
];
function hashCode(str='') {
  let h = 0; for (let i = 0; i < String(str).length; i++) { h = (h<<5) - h + String(str).charCodeAt(i); h |= 0; }
  return Math.abs(h);
}
function pickColorFromKey(key) {
  if (!key) return '#00B18F';
  return PALETTE[ hashCode(String(key)) % PALETTE.length ];
}
function hexToRGBA(hex, alpha=0.15) {
  const v = hex.replace('#','');
  const r = parseInt(v.length===3? v[0]+v[0]:v.slice(0,2),16);
  const g = parseInt(v.length===3? v[1]+v[1]:v.slice(2,4),16);
  const b = parseInt(v.length===3? v[2]+v[2]:v.slice(4,6),16);
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

// ---------- —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTML –≤ —à–∞–±–ª–æ–Ω–µ ----------
function escapeHTML(s='') {
  return String(s)
    .replace(/&/g,'&amp;').replace(/</g,'&lt;')
    .replace(/>/g,'&gt;').replace(/"/g,'&quot;')
    .replace(/'/g,'&#039;');
}

// ---------- –µ–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è ----------
// –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ escapeHTML –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
const renderEventContent = (arg) => {
  const { event, timeText, view } = arg;
  const tName = event.extendedProps.teacher_name || '';
  const room  = event.extendedProps.auditorium || '';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º
  const formatTimeRange = () => {
    if (!event.start) return timeText || '';
    
    const startTime = new Date(event.start).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
    
    if (event.end) {
      const endTime = new Date(event.end).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
      return `${startTime} ‚Äî ${endTime}`;
    }
    
    return startTime;
  };
  
  const formattedTime = formatTimeRange();

  // –í –º–æ–±–∏–ª—å–Ω–æ–º list-–≤–∏–¥–µ ‚Äî –±–æ–ª–µ–µ –ø–ª–æ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
  if (view?.type?.startsWith?.('list')) {
    return {
      html: `
        <div class="fc-listcard">
          <div class="fc-listcard-title">${escapeHTML(event.title || '')}</div>
          <div class="fc-listcard-meta">
            ${formattedTime ? `<span class="fc-listcard-time">${escapeHTML(formattedTime)}</span>` : ``}
            ${tName ? `<span>${escapeHTML(tName)}</span>` : ``}
            ${room  ? `<span>${escapeHTML(room)}</span>` : ``}
          </div>
        </div>
      `
    };
  }

  // –ú–µ—Å—è—Ü/–Ω–µ–¥–µ–ª—è/–¥–µ–Ω—å ‚Äî –ø—Ä–µ–∂–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞
  return {
    html: `
      <div class="fc-card fc-card--stack">
        <div class="fc-card-time">${escapeHTML(formattedTime || '')}</div>
        <div class="fc-card-title">${escapeHTML(event.title || '')}</div>
        ${tName ? `<div class="fc-card-sub">${escapeHTML(tName)}</div>` : ``}
        ${room  ? `<div class="fc-card-sub">${escapeHTML(room)}</div>` : ``}
      </div>
    `
  };
};



// ---------- –∫–ª–∞—Å—Å—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ----------
const eventClassNames = () => ['fc-ev', 'fc-ev--card'];

// ---------- –ø–æ–∫—Ä–∞—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∫—É—Ä—Å—É/–≥—Ä—É–ø–ø–µ ----------
const eventDidMount = (info) => {
  const ext = info.event.extendedProps || {};
  const keyForColor = ext.group_id || ext.group_name || ext.course_id || ext.course_name || 'default';
  const accent      = pickColorFromKey(keyForColor);
  info.el.style.setProperty('--ev-accent', accent);
  info.el.style.setProperty('--ev-accent-bg', hexToRGBA(accent, 0.12));
  info.el.style.setProperty('--ev-accent-border', hexToRGBA(accent, 0.9));
};

// ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ "+N –µ—â–µ" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫—Ä—ã—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è) ----------
const handleMoreLinkClick = (info) => {
  // info —Å–æ–¥–µ—Ä–∂–∏—Ç: date, allSegs, hiddenSegs, jsEvent, view
  const { hiddenSegs, jsEvent } = info;
  
  if (!hiddenSegs || hiddenSegs.length === 0) {
    return false; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
  }
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ FullCalendar
  if (jsEvent) {
    jsEvent.preventDefault();
    jsEvent.stopPropagation();
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–æ–ø–∞–ø–∞
  const accent = '#00B18F';
  
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ø–∞–ø—ã
  document.querySelectorAll('.fc-more-popover-custom').forEach(p => p.remove());
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø —Å –¢–û–õ–¨–ö–û —Å–∫—Ä—ã—Ç—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
  const popover = document.createElement('div');
  popover.className = 'fc-more-popover-custom';
  popover.style.setProperty('--popover-accent', accent);
  popover.style.setProperty('--popover-accent-bg', hexToRGBA(accent, 0.12));
  popover.style.setProperty('--popover-accent-border', hexToRGBA(accent, 0.9));
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const eventsList = hiddenSegs.map(seg => {
    const event = seg.event;
    const tName = event.extendedProps.teacher_name || '';
    const room = event.extendedProps.auditorium || '';
    
    const formatTimeRange = () => {
      if (!event.start) return '';
      
      const startTime = new Date(event.start).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
      
      if (event.end) {
        const endTime = new Date(event.end).toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        return `${startTime} ‚Äî ${endTime}`;
      }
      
      return startTime;
    };
    
    const formattedTime = formatTimeRange();
    
    return `
      <div class="fc-more-event" data-event-id="${event.id}">
        <div class="fc-more-event-time">${escapeHTML(formattedTime)}</div>
        <div class="fc-more-event-title">${escapeHTML(event.title || '')}</div>
        ${tName ? `<div class="fc-more-event-sub">üë§ ${escapeHTML(tName)}</div>` : ''}
        ${room ? `<div class="fc-more-event-sub">üö™ ${escapeHTML(room)}</div>` : ''}
      </div>
    `;
  }).join('');
  
  popover.innerHTML = `
    <div class="fc-more-popover-header">
      <span>–°–∫—Ä—ã—Ç—ã–µ –∑–∞–Ω—è—Ç–∏—è (${hiddenSegs.length})</span>
      <button class="fc-more-popover-close">√ó</button>
    </div>
    <div class="fc-more-popover-body">
      ${eventsList}
    </div>
  `;
  
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø–∞–ø
  if (!jsEvent || !jsEvent.target) {
    return false; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–∫–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
  }
  
  const rect = jsEvent.target.getBoundingClientRect();
  popover.style.position = 'fixed';
  popover.style.left = `${rect.left}px`;
  popover.style.top = `${rect.bottom + 5}px`;
  popover.style.zIndex = '10000';
  
  document.body.appendChild(popover);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–ø–∞–ø –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
  setTimeout(() => {
    if (!popover.isConnected) return;
    
    const popoverRect = popover.getBoundingClientRect();
    
    // –ï—Å–ª–∏ –ø–æ–ø–∞–ø –≤—ã—Ö–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    if (popoverRect.right > window.innerWidth) {
      popover.style.left = `${window.innerWidth - popoverRect.width - 20}px`;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ø–∞–ø –≤—ã—Ö–æ–¥–∏—Ç —Å–ª–µ–≤–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    if (popoverRect.left < 0) {
      popover.style.left = '20px';
    }
    
    // –ï—Å–ª–∏ –ø–æ–ø–∞–ø –≤—ã—Ö–æ–¥–∏—Ç —Å–Ω–∏–∑—É –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
    if (popoverRect.bottom > window.innerHeight) {
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
      popover.style.top = `${rect.top - popoverRect.height - 5}px`;
    }
  }, 10);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
  const closePopover = () => {
    if (popover && popover.isConnected) {
      popover.remove();
    }
  };
  
  const closeBtn = popover.querySelector('.fc-more-popover-close');
  if (closeBtn) {
    closeBtn.addEventListener('click', closePopover);
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ø–∞–ø–∞
  setTimeout(() => {
    document.addEventListener('click', function closeOnOutside(e) {
      if (!popover.contains(e.target) && !e.target.closest('.fc-daygrid-more-link')) {
        closePopover();
        document.removeEventListener('click', closeOnOutside);
      }
    });
  }, 100);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ–ø–∞–ø–µ
  const eventElements = popover.querySelectorAll('.fc-more-event');
  eventElements.forEach(el => {
    el.addEventListener('click', (e) => {
      const eventId = el.getAttribute('data-event-id');
      const event = hiddenSegs.find(seg => seg.event.id === eventId)?.event;
      if (event && window.__scheduleEventClickHandler) {
        closePopover();
        window.__scheduleEventClickHandler(event.extendedProps.originalEvent);
      }
    });
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ FullCalendar
  return false;
};



export default function SchedulePage() {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [events, setEvents] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [loading, setLoading] = useState(true);

// ‚Äî‚Äî‚Äî –º–æ–±–∏–ª—å–Ω—ã–π –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç + ref –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚Äî‚Äî‚Äî
const calendarRef = useRef(null);
const [isMobile, setIsMobile] = useState(
  typeof window !== 'undefined' &&
  window.matchMedia('(max-width: 768px)').matches
);

useEffect(() => {
  const mq = window.matchMedia('(max-width: 768px)');
  const onChange = (e) => setIsMobile(e.matches);
  mq.addEventListener?.('change', onChange);
  mq.addListener?.(onChange); // –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  return () => {
    mq.removeEventListener?.('change', onChange);
    mq.removeListener?.(onChange);
  };
}, []);

// –ü—Ä–∏ —Å–º–µ–Ω–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞ ‚Äî –º–µ–Ω—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
useEffect(() => {
  const api = calendarRef.current?.getApi?.();
  if (!api) return;
  api.changeView(isMobile ? 'listWeek' : 'dayGridMonth');
}, [isMobile]);

// –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ—Å—è—Ü" –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
useEffect(() => {
  if (!loading && !isMobile) {
    setTimeout(() => {
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –º–µ—Å—è—Ü–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      const monthButton = document.querySelector('.fc-dayGridMonth-button');
      if (monthButton) {
        monthButton.click();
        console.log('[SchedulePage] –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ú–µ—Å—è—Ü"');
      }
    },300);
  }
}, [loading, isMobile]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const [showFilterModal, setShowFilterModal] = useState(false);
  const [activeFilters, setActiveFilters] = useState({});
  const [filterOptions, setFilterOptions] = useState({});
  const [isFiltered, setIsFiltered] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  const isAdmin = user?.role === 'admin' || user?.role === 'superadmin';

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  useEffect(() => {
    if (!isAdmin) return;

    const loadFilterOptions = async () => {
      try {
        const options = await getFilterOptions();
        setFilterOptions(options);
      } catch (error) {
        console.error('[SchedulePage] Error loading filter options:', error);
      }
    };

    loadFilterOptions();
  }, [isAdmin]);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const loadSchedule = async (filters = {}) => {
    try {
      setLoading(true);
      
      let scheduleData;
      if (isAdmin && Object.keys(filters).length > 0) {
        // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        scheduleData = await getFilteredSchedule(filters);
        setIsFiltered(true);
      } else {
        // –û–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        scheduleData = await getUserScheduleOptimized(user);
        setIsFiltered(false);
      }
      
      console.log('[SchedulePage] Schedule loaded:', scheduleData);
      setEvents(scheduleData || []);
    } catch (error) {
      console.error('[SchedulePage] Error loading schedule:', error);
      setEvents([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }

    loadSchedule(activeFilters);
  }, [user, navigate, activeFilters]);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const handleFilterApply = (filters) => {
    console.log('[SchedulePage] Applying filters:', filters);
    setActiveFilters(filters);
  };

  const handleClearFilters = () => {
    setActiveFilters({});
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è FullCalendar ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const calendarEvents = useMemo(() => events.map(e => {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const startTime = new Date(e.start_datetime || e.start).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ HH:mm
      // –ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
      let name = e.course_name || e.lesson_name || e.event_name || e.title || '';
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
      const firstNumberMatch = name.match(/^\d+/);
      const firstNumber = firstNumberMatch ? firstNumberMatch[0] : '';
      // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª–∞
      const cleanName = name.replace(/^\d+\s*/, '');
      return {
        id: e.id,
        title: `${firstNumber} ${cleanName}`.trim(),
        start: e.start_datetime || e.start,
        end: e.end_datetime || e.end,
        // ...existing code...
        backgroundColor: e.is_opened 
          ? 'rgba(0, 177, 143, 0.85)' 
          : new Date() < new Date(e.start_datetime || e.start) 
            ? 'rgba(255, 193, 7, 0.85)' 
            : 'rgba(239, 68, 68, 0.85)',
        borderColor: e.is_opened 
          ? 'rgba(3, 131, 106, 0.9)' 
          : new Date() < new Date(e.start_datetime || e.start) 
            ? 'rgba(211, 158, 0, 0.9)' 
            : 'rgba(220, 38, 38, 0.9)',
        extendedProps: {
          originalEvent: e,
          lesson_name: e.lesson_name,
          course_name: e.course_name,
          group_name: e.group_name,
          teacher_name: e.teacher_name,
          auditorium: e.auditorium,
          is_opened: e.is_opened,
          course_id: e.course_id,
          lesson_id: e.lesson_id
        }
      };
  }), [events]);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const nearestDayISO = useMemo(() => {
    if (!events.length) return null;
    
    const today = new Date();
    today.setHours(8, 0, 0, 0); // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å 8:00 —É—Ç—Ä–∞, –∞ –Ω–µ —Å 00:00
    
    const upcomingEvents = events
      .filter(e => new Date(e.start_datetime || e.start) >= today)
      .sort((a, b) => new Date(a.start_datetime || a.start) - new Date(b.start_datetime || b.start));
    
    return upcomingEvents.length > 0 
      ? new Date(upcomingEvents[0].start_datetime || upcomingEvents[0].start)
      : new Date();
  }, [events]);

  const nearestDayEvents = useMemo(() => {
    if (!nearestDayISO) return [];
    
    const targetDate = nearestDayISO.toDateString();
    return events.filter(e => {
      const eventDate = new Date(e.start_datetime || e.start).toDateString();
      return eventDate === targetDate;
    });
  }, [events, nearestDayISO]);

  const widgetLabel = nearestDayISO
    ? nearestDayISO.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' })
    : '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π';

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-–≤–∏–¥–∂–µ—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const handleEventClick = ({ event, jsEvent }) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º popover —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    const calendarApi = calendarRef.current?.getApi?.();
    if (calendarApi) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª—é–±—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ popovers
      try {
        const popovers = document.querySelectorAll('.fc-popover, .fc-more-popover-custom');
        popovers.forEach(popover => {
          if (popover.isConnected) {
            popover.remove();
          }
        });
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–æ–≤–æ–≤:', e);
      }
    }
    
    console.log('[SchedulePage] Event clicked:', event.extendedProps.originalEvent);
    console.log('[SchedulePage] Event course_id:', event.extendedProps.originalEvent.course_id);
    console.log('[SchedulePage] Event lesson_id:', event.extendedProps.originalEvent.lesson_id);
    console.log('[SchedulePage] Event extendedProps:', event.extendedProps);
    setSelectedEvent(event.extendedProps.originalEvent);
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –ø–æ–ø–∞–ø–∞
  useEffect(() => {
    window.__scheduleEventClickHandler = (eventData) => {
      setSelectedEvent(eventData);
    };
    
    return () => {
      delete window.__scheduleEventClickHandler;
    };
  }, []);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const fio = [user?.first_name, user?.surname, user?.patronymic]
              .filter(Boolean).join(' ');

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="schedule" userRole={user.role} />
        <div className="main-content">
         <SmartTopBar pageTitle="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" />

          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem="schedule" userRole={user.role} />
      
      <div className="main-content schedule-fullscreen-mode">
        <SmartTopBar pageTitle="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" />

        
        {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
        {isAdmin && (
          <div className="admin-schedule-controls">
            <div className="filter-info">
              <div className="filter-status">
                {isFiltered && (
                  <span className="filtered-badge">
                    üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: {formatFiltersText(activeFilters, filterOptions)}
                  </span>
                )}
              </div>
              <div className="filter-controls">
                <button 
                  className="btn btn-filter" 
                  onClick={() => setShowFilterModal(true)}
                >
                  üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                </button>
                {isFiltered && (
                  <button 
                    className="btn btn-clear" 
                    onClick={handleClearFilters}
                  >
                    <span className="clear-icon">√ó</span> –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                  </button>
                )}
              </div>
            </div>
          </div>
        )}
        
        <div className={`schedule-page-fullscreen ${isAdmin ? 'has-admin-filters' : ''}`}>
          <div className="schedule-layout-fullscreen">
            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
            <div className="calendar-widget-fullscreen">
            <FullCalendar
  ref={calendarRef}
  plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}
  initialView={isMobile ? 'listWeek' : 'dayGridMonth'}
  headerToolbar={{
    left: 'prev,next',
    center: 'title',
    right: isMobile ? 'listWeek,timeGridDay,today' : 'dayGridMonth,timeGridWeek,timeGridDay,today'
  }}
  buttonText={{ today: '–°–µ–≥–æ–¥–Ω—è', month: '–ú–µ—Å—è—Ü', week: '–ù–µ–¥–µ–ª—è', day: '–î–µ–Ω—å', list: '–°–ø–∏—Å–æ–∫' }}
  locale="ru"
  firstDay={1}
  height="100%"
  events={calendarEvents}
  eventClick={handleEventClick}
  eventDisplay="block"
  dayMaxEvents={3}
  moreLinkText={(n) => `–µ—â–µ +${n}`}
  moreLinkClick={handleMoreLinkClick}
  
  noEventsContent="–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
  slotMinTime="08:00:00"
  slotMaxTime="22:00:00"
  scrollTime="08:00:00"
  businessHours={{ daysOfWeek: [1,2,3,4,5,6], startTime: '08:00', endTime: '20:00' }}
  allDaySlot={false}
  slotDuration="00:30:00"
  slotLabelInterval="01:00:00"
  expandRows={true}
  nowIndicator={true}
  
  /* —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (09:50), –∞ –≤ dayGrid –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–µ —Ä–∏—Å—É–µ–º ‚Äî —É –Ω–∞—Å —Å–≤–æ–π —à–∞–±–ª–æ–Ω */
  eventTimeFormat={{ hour: '2-digit', minute: '2-digit', hour12: false }}

  /* –Ω–∞—à —à–∞–±–ª–æ–Ω –∏ —Å—Ç–∏–ª–∏ */
  eventContent={renderEventContent}
  eventClassNames={eventClassNames}
  eventDidMount={eventDidMount}
  
  /* –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è */
  eventOverlap={false}
  slotEventOverlap={false}   // <‚Äî –≤–∞–∂–Ω–æ –¥–ª—è week/day
  eventMaxStack={1}  
  views={{
    listWeek: {
      listDayFormat: { weekday: 'long', day: 'numeric', month: 'long' },
      listDaySideFormat: false
    },
    timeGridWeek: {
      dayMaxEvents: 3, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
      moreLinkClick: handleMoreLinkClick // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    },
    timeGridDay: {
      dayMaxEvents: 3, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
      moreLinkClick: handleMoreLinkClick // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }
  }}
/>


            </div>
          </div>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ */}
        {isAdmin && (
          <ScheduleFilterModal
            isOpen={showFilterModal}
            onClose={() => setShowFilterModal(false)}
            onFilterApply={handleFilterApply}
            currentFilters={activeFilters}
          />
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏ */}
        <EventModal
          event={selectedEvent}
          onClose={() => setSelectedEvent(null)}
          userRole={user?.role}
        />
      </div>
    </div>
  );
}
