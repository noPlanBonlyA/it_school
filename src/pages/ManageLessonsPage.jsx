import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import LessonEditor from '../components/LessonEditor';
import CourseGroupsViewer from '../components/CourseGroupsViewer';
import { useAuth } from '../contexts/AuthContext';
import { getCourseLessons, deleteLessonWithMaterials } from '../services/lessonService';
import { getCourse } from '../services/courseService';
import { getCoursesPath, getCoursesTitle } from '../utils/navigationUtils';
import '../styles/LessonEditor.css';
import '../styles/ManageUserPage.css'; // –§–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫

export default function ManageLessonsPage() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();

  const [course, setCourse] = useState(null);
  const [lessons, setLessons] = useState([]);
  const [showEditor, setShowEditor] = useState(false);
  const [editingLesson, setEditingLesson] = useState(null);
  const [loading, setLoading] = useState(true);
  const [lastCreatedLessonId, setLastCreatedLessonId] = useState(null);

  useEffect(() => {
    loadData();
  }, [courseId]);

  const loadData = async () => {
    try {
      setLoading(true);
      const [courseData, lessonsData] = await Promise.all([
        getCourse(courseId),
        getCourseLessons(courseId)
      ]);
      setCourse(courseData);
      setLessons(lessonsData);
    } catch (error) {
      console.error('Error loading data:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateLesson = () => {
    setEditingLesson(null);
    setShowEditor(true);
  };

  const handleEditLesson = (lesson) => {
    setEditingLesson(lesson);
    setShowEditor(true);
  };

  const handleDeleteLesson = async (lesson) => {
    if (!window.confirm('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;
    
    try {
      await deleteLessonWithMaterials(courseId, lesson.id, {
        teacher_material_id: lesson.teacher_material_id,
        student_material_id: lesson.student_material_id
      });
      
      await loadData();
    } catch (error) {
      console.error('Error deleting lesson:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞');
    }
  };

  const handleSaveLesson = async (savedLesson) => {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —É—Ä–æ–∫ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    if (!editingLesson && savedLesson && savedLesson.id) {
      setLastCreatedLessonId(savedLesson.id);
      console.log('New lesson created:', savedLesson.id);
    }
    
    setShowEditor(false);
    setEditingLesson(null);
    await loadData();
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π activeItem –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  const getSidebarActiveItem = (userRole) => {
    switch (userRole) {
      case 'admin':
      case 'superadmin':
        return 'manageCourses';
      case 'teacher':
        return 'teacherCourses';
      default:
        return 'teacherCourses';
    }
  };

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem={getSidebarActiveItem(user.role)} userRole={user.role} />
        <div className="main-content">
          <Topbar userName={fullName} userRole={user.role} onProfileClick={() => navigate('/profile')} />
          <div className="loading-container">
            <div className="loader"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-layout">
      <Sidebar activeItem={getSidebarActiveItem(user.role)} userRole={user.role} />
      <div className="main-content">
        <Topbar userName={fullName} userRole={user.role} onProfileClick={() => navigate('/profile')} />

        <div className="course-header">
          <button 
            className="btn-back"
            onClick={() => navigate(getCoursesPath(user.role))}
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ {getCoursesTitle(user.role)}
          </button>
          <h1>{course?.name} - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏</h1>
        </div>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä—É–ø–ø –∫—É—Ä—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ */}
        {course && (
          <CourseGroupsViewer 
            courseId={courseId}
            courseName={course.name}
            newLessonId={lastCreatedLessonId}
            onAutoAdd={(results) => {
              console.log('Auto-add results:', results);
              setLastCreatedLessonId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            }}
          />
        )}

        {showEditor ? (
          <div className="block">
            <div className="editor-header">
              <h2>{editingLesson ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞'}</h2>
              <button 
                className="btn-secondary"
                onClick={() => {
                  setShowEditor(false);
                  setEditingLesson(null);
                }}
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
              </button>
            </div>
            <LessonEditor
              courseId={courseId}
              lesson={editingLesson}
              onSave={handleSaveLesson}
              onCancel={() => {
                setShowEditor(false);
                setEditingLesson(null);
              }}
            />
          </div>
        ) : (
          <div className="block">
            <div className="lessons-header">
              <h2>–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞</h2>
              <button className="btn-primary create-lesson-btn" onClick={handleCreateLesson}>
                ‚ú® –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫
              </button>
            </div>

            {lessons.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon">üìö</div>
                <h3>–£—Ä–æ–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞</p>
                <button className="btn-primary" onClick={handleCreateLesson}>
                  –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
                </button>
              </div>
            ) : (
              <div className="lessons-grid">
                {lessons.map((lesson, index) => (
                  <div key={lesson.id} className="lesson-card">
                    <div className="lesson-number">
                      {index + 1}
                    </div>
                    <div className="lesson-content">
                      <h3 className="lesson-title">{lesson.name}</h3>
                      <div className="lesson-meta">
                        <div className="lesson-materials">
                          {lesson.teacher_material && (
                            <span className="material-badge teacher">üìö –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</span>
                          )}
                          {lesson.student_material && (
                            <span className="material-badge student">üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç</span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="lesson-actions">
                      <button 
                        className="btn-secondary btn-sm"
                        onClick={() => handleEditLesson(lesson)}
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        className="btn-primary btn-sm"
                        onClick={() => navigate(`/courses/${courseId}/lessons/${lesson.id}/teacher`)}
                        title="–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫"
                      >
                        üöÄ
                      </button>
                      <button 
                        className="btn-danger btn-sm"
                        onClick={() => handleDeleteLesson(lesson)}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}