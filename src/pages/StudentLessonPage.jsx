// src/pages/StudentLessonPage.jsx

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Topbar from '../components/TopBar';
import { useAuth } from '../contexts/AuthContext';
import api from '../api/axiosInstance';
import '../styles/StudentLessonPage.css';

export default function StudentLessonPage() {
  const { courseId, lessonId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();

  const [lesson, setLesson] = useState(null);
  const [file, setFile] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('[StudentLessonPage] Loading lesson materials for:', { courseId, lessonId });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        const studentMaterialsResponse = await api.get(`/courses/${courseId}/lessons/${lessonId}/student-materials`);
        console.log('[StudentLessonPage] Student materials loaded:', studentMaterialsResponse.data);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        const lessonResponse = await api.get(`/courses/${courseId}/lessons/${lessonId}`);
        console.log('[StudentLessonPage] Lesson info loaded:', lessonResponse.data);
        
        if (studentMaterialsResponse.data && lessonResponse.data) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
          let studentMaterialUrl = null;
          let homeworkMaterialUrl = null;
          
          // –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
          if (studentMaterialsResponse.data.id) {
            studentMaterialUrl = `${window.location.protocol}//${window.location.hostname}:8080/courses/material/${studentMaterialsResponse.data.id}`;
          }
          
          // –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ  
          if (lessonResponse.data.homework_id) {
            homeworkMaterialUrl = `${window.location.protocol}//${window.location.hostname}:8080/courses/material/${lessonResponse.data.homework_id}`;
          }

          setLesson({
            id: lessonId,
            name: lessonResponse.data.name,
            course_id: courseId,
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —Ñ–∞–π–ª–∞–º–∏, —Ç–∞–∫ –∏ HTML)
            student_material_url: studentMaterialUrl,
            student_material_name: studentMaterialsResponse.data.name,
            // –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Ñ–∞–π–ª–æ–º, —Ç–∞–∫ –∏ HTML)
            homework_material_url: homeworkMaterialUrl
          });
          
        } else {
          setError('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
      } catch (error) {
        console.error('[StudentLessonPage] Error loading lesson:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞: ' + (error.response?.data?.detail || error.message));
      } finally {
        setLoading(false);
      }
    })();
  }, [courseId, lessonId]);

  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    if (selectedFile) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (selectedFile.size > 10 * 1024 * 1024) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        return;
      }
      setFile(selectedFile);
    }
  };

  const handleSubmit = async () => {
    if (!file) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return;
    }

    try {
      setSubmitting(true);
      
      const formData = new FormData();
      formData.append('homework_file', file);
      formData.append('homework_data', JSON.stringify({
        name: file.name,
        lesson_student_id: lessonId // –∏–ª–∏ –¥—Ä—É–≥–æ–π ID, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
      }));

      console.log('[StudentLessonPage] Submitting homework:', {
        fileName: file.name,
        fileSize: file.size,
        courseId,
        lessonId
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó
      const response = await api.post(
        `/courses/${courseId}/lessons/${lessonId}/homework`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      console.log('[StudentLessonPage] Homework submitted successfully:', response.data);
      
      setSubmitted(true);
      setFile(null);
      alert('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      
    } catch (error) {
      console.error('[StudentLessonPage] Error submitting homework:', error);
      
      const errorMessage = error.response?.data?.detail || 
                          error.response?.data?.message || 
                          error.message || 
                          '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: ' + errorMessage);
    } finally {
      setSubmitting(false);
    }
  };

  const fullName = [user.first_name, user.surname, user.patronymic]
    .filter(Boolean).join(' ') || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  if (loading) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="courses" userRole={user?.role} />
        <div className="main-content">
          <Topbar 
            userName={fullName}
            userRole={user?.role}
          />
          <div className="content-area">
            <div className="loading-container">
              <div className="loader"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–∞...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app-layout">
        <Sidebar activeItem="courses" userRole={user?.role} />
        <div className="main-content">
          <Topbar 
            userName={fullName}
            userRole={user?.role}
          />
          <div className="content-area">
            <div className="error-container">
              <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
              <p>{error}</p>
              <button 
                onClick={() => navigate(`/courses/${courseId}/student`)}
                className="btn-primary"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –í —Ä–µ–Ω–¥–µ—Ä–µ –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const renderMaterial = (materialUrl, materialName, title) => {
    if (!materialUrl) return null;
    
    return (
      <div className="material-section">
        <h3>{title}</h3>
        <div className="material-name">{materialName}</div>
        <div className="material-content">
          <iframe
            src={materialUrl}
            title={title}
            width="100%"
            height="600"
            style={{ border: '1px solid #ddd', borderRadius: '4px' }}
            onError={(e) => {
              // –ï—Å–ª–∏ iframe –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
              e.target.style.display = 'none';
              const link = e.target.nextElementSibling;
              if (link && link.tagName === 'A') {
                link.style.display = 'block';
              }
            }}
          />
          <a 
            href={materialUrl}
            target="_blank"
            rel="noopener noreferrer"
            className="btn-primary"
            style={{ display: 'none', marginTop: '10px' }}
          >
            –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
          </a>
        </div>
      </div>
    );
  };

  return (
    <div className="app-layout">
      <Sidebar activeItem="courses" userRole={user?.role} />
      
      <div className="main-content">
        <Topbar 
          userName={fullName}
          userRole={user?.role}
        />
        
        <div className="content-area student-lesson-page">
          {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
          <div className="breadcrumb">
            <button 
              onClick={() => navigate('/courses')}
              className="breadcrumb-link"
            >
              –ö—É—Ä—Å—ã
            </button>
            <span className="breadcrumb-separator">‚Ä∫</span>
            <button 
              onClick={() => navigate(`/courses/${courseId}/student`)}
              className="breadcrumb-link"
            >
              –ö—É—Ä—Å
            </button>
            <span className="breadcrumb-separator">‚Ä∫</span>
            <span className="breadcrumb-current">{lesson?.name || '–£—Ä–æ–∫'}</span>
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ */}
          <div className="lesson-header">
            <h1>{lesson?.name || '–£—Ä–æ–∫'}</h1>
            <div className="lesson-meta">
              <span className="lesson-status">
                üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞
              </span>
            </div>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞ */}
          <div className="lesson-content">
            {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
            {lesson?.student_material_url && (
              <div className="material-section">
                <h2>üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞</h2>
                <div className="material-content">
                  <iframe
                    src={lesson.student_material_url}
                    title="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞"
                    className="material-iframe"
                    frameBorder="0"
                    style={{
                      width: '100%',
                      minHeight: '500px',
                      border: '1px solid #e5e7eb',
                      borderRadius: '8px'
                    }}
                  />
                </div>
                <div className="material-actions">
                  <a 
                    href={lesson.student_material_url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="btn-secondary"
                  >
                    üîó –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                  </a>
                </div>
              </div>
            )}

            {/* –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ */}
            <div className="homework-section">
              <h2>üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h2>
              
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å */}
              {lesson?.homework_material_url && (
                <div className="homework-description">
                  <h3>–ó–∞–¥–∞–Ω–∏–µ:</h3>
                  <iframe
                    src={lesson.homework_material_url}
                    title="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
                    className="homework-iframe"
                    frameBorder="0"
                    style={{
                      width: '100%',
                      minHeight: '300px',
                      border: '1px solid #e5e7eb',
                      borderRadius: '8px',
                      marginBottom: '20px'
                    }}
                  />
                  <div className="material-actions">
                    <a 
                      href={lesson.homework_material_url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="btn-secondary"
                    >
                      üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                    </a>
                  </div>
                </div>
              )}

              {/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
              {submitted ? (
                <div className="hw-submitted">
                  <div className="submitted-icon">‚úÖ</div>
                  <h3>–í—ã —É–∂–µ —Å–¥–∞–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
                  <p>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–∫–æ—Ä–æ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç</p>
                </div>
              ) : (
                <div className="hw-form">
                  <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:</p>
                  
                  <div className="submission-options">
                    <div className="submission-option">
                      <h3>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</h3>
                      <div className="file-upload">
                        <input
                          type="file"
                          id="homework-file"
                          onChange={handleFileChange}
                          disabled={submitting}
                          accept=".pdf,.doc,.docx,.ppt,.pptx,.jpg,.jpeg,.png,.txt,.zip,.rar"
                          required
                        />
                        <label 
                          htmlFor="homework-file" 
                          className={submitting ? "disabled" : ""}
                        >
                          {file ? `üìé ${file.name}` : "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"}
                        </label>
                      </div>
                      {file && (
                        <div style={{ marginTop: '8px' }}>
                          <div style={{ fontSize: '12px', color: '#666' }}>
                            –†–∞–∑–º–µ—Ä: {Math.round(file.size / 1024)} KB
                          </div>
                          <button 
                            type="button" 
                            onClick={() => { setFile(null); }}
                            style={{ 
                              marginTop: '5px', 
                              padding: '5px 10px', 
                              fontSize: '12px',
                              background: '#dc3545',
                              color: 'white',
                              border: 'none',
                              borderRadius: '4px',
                              cursor: 'pointer'
                            }}
                          >
                            –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <button 
                    className="btn-primary"
                    onClick={handleSubmit}
                    disabled={!file || submitting}
                    style={{
                      marginTop: '20px',
                      width: '100%',
                      padding: '12px'
                    }}
                  >
                    {submitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'}
                  </button>
                </div>
              )}

              {/* –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
              {!lesson?.homework_material_url && !submitted && (
                <div className="no-homework">
                  <p>–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
