// src/components/AttendanceWidget.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../api/axiosInstance';
import '../styles/AttendanceWidget.css';

export default function AttendanceWidget() {
  const { user } = useAuth();
  const [attendanceData, setAttendanceData] = useState({
    attendanceMap: {},
    stats: {
      totalLessons: 0,
      attendedLessons: 0,
      excusedLessons: 0,
      missedLessons: 0
    }
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
  const loadAttendanceData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('[AttendanceWidget] Loading attendance data for user:', user?.id);
      const response = await api.get('/courses/student/lesson-student');
      
      console.log('[AttendanceWidget] API Response:', response.data);
      
      const lessonStudents = response.data || [];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      const attendanceMap = {};
      let totalLessons = 0;
      let attendedLessons = 0;
      let excusedLessons = 0;
      let missedLessons = 0;
      
      lessonStudents.forEach(ls => {
        if (!ls.lesson_group?.start_datetime) return;
        
        const date = ls.lesson_group.start_datetime.split('T')[0];
        if (!attendanceMap[date]) {
          attendanceMap[date] = [];
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π
        let attendance_status = 'unknown';
        if (ls.is_visited) {
          attendance_status = 'attended';
        } else if (ls.is_excused_absence) {
          attendance_status = 'excused';
        } else {
          attendance_status = 'missed';
        }
        
        attendanceMap[date].push({
          course_name: ls.lesson_group?.lesson?.course?.name || '–ö—É—Ä—Å',
          lesson_name: ls.lesson_group?.lesson?.name || '–£—Ä–æ–∫',
          attendance_status: attendance_status,
          start_datetime: ls.lesson_group.start_datetime,
          is_visited: ls.is_visited,
          is_excused_absence: ls.is_excused_absence,
          is_compensated_skip: ls.is_compensated_skip
        });
        
        totalLessons++;
        if (attendance_status === 'attended') attendedLessons++;
        else if (attendance_status === 'excused') excusedLessons++;
        else if (attendance_status === 'missed') missedLessons++;
      });
      
      console.log('[AttendanceWidget] Processed data:', {
        attendanceMap,
        stats: { totalLessons, attendedLessons, excusedLessons, missedLessons }
      });
      
      setAttendanceData({
        attendanceMap,
        stats: {
          totalLessons,
          attendedLessons,
          excusedLessons,
          missedLessons
        }
      });
    } catch (err) {
      console.error('[AttendanceWidget] Error loading data:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user?.id) {
      loadAttendanceData();
    }
  }, [user?.id]);

  if (loading) {
    return (
      <div className="attendance-widget">
        <h3>üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h3>
        <div className="loading-container">
          <div className="loader"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="attendance-widget">
        <h3>üìä –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h3>
        <div className="error-container">
          <div className="error-message">{error}</div>
          <button className="retry-btn" onClick={loadAttendanceData}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
          </button>
        </div>
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—è—á–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
  const goToPreviousMonth = () => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(newDate.getMonth() - 1);
      return newDate;
    });
  };

  const goToNextMonth = () => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(newDate.getMonth() + 1);
      return newDate;
    });
  };

  const goToCurrentMonth = () => {
    setCurrentDate(new Date());
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  const generateMonthCalendar = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(year, month, 1);
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const lastDay = new Date(year, month + 1, 0);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Å—è—Ü (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
    let startDay = firstDay.getDay();
    startDay = startDay === 0 ? 6 : startDay - 1; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0
    
    const daysInMonth = lastDay.getDate();
    const calendar = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏
    for (let i = startDay - 1; i >= 0; i--) {
      const date = new Date(year, month, -i);
      calendar.push({
        date,
        dateStr: date.toISOString().split('T')[0],
        dayData: attendanceData.attendanceMap?.[date.toISOString().split('T')[0]] || null,
        isCurrentMonth: false,
        isToday: false
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      const dateStr = date.toISOString().split('T')[0];
      const isToday = dateStr === today.toISOString().split('T')[0];
      
      calendar.push({
        date,
        dateStr,
        dayData: attendanceData.attendanceMap?.[dateStr] || null,
        isCurrentMonth: true,
        isToday
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const remainingDays = 42 - calendar.length; // 6 –Ω–µ–¥–µ–ª—å √ó 7 –¥–Ω–µ–π = 42
    for (let day = 1; day <= remainingDays; day++) {
      const date = new Date(year, month + 1, day);
      calendar.push({
        date,
        dateStr: date.toISOString().split('T')[0],
        dayData: attendanceData.attendanceMap?.[date.toISOString().split('T')[0]] || null,
        isCurrentMonth: false,
        isToday: false
      });
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ–¥–µ–ª–∏
    const weeks = [];
    for (let i = 0; i < calendar.length; i += 7) {
      weeks.push(calendar.slice(i, i + 7));
    }
    
    return weeks;
  };

    // –ü–æ–ª—É—á–∞–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è —è—á–µ–π–∫–∏ –¥–Ω—è
  const getDayCellClass = (dayData, isCurrentMonth = true, isToday = false) => {
    let baseClass = 'day-cell';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –¥–Ω–µ–π –Ω–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if (!isCurrentMonth) {
      baseClass += ' other-month';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    if (isToday) {
      baseClass += ' today';
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–∏—è—Ö
    if (!dayData || dayData.length === 0) {
      baseClass += ' empty';
      return baseClass;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å –¥–Ω—è
    const attendedCount = dayData.filter(lesson => lesson.is_visited).length;
    const excusedCount = dayData.filter(lesson => lesson.is_excused_absence).length;
    const missedCount = dayData.filter(lesson => !lesson.is_visited && !lesson.is_excused_absence).length;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø—Ä–æ–ø—É—Å–∫ > —É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞ > –ø–æ—Å–µ—â–µ–Ω–∏–µ
    if (missedCount > 0) {
      baseClass += ' missed';
    } else if (excusedCount > 0) {
      baseClass += ' excused';
    } else if (attendedCount > 0) {
      baseClass += ' attended';
    } else {
      baseClass += ' empty';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π
    const totalLessons = dayData.length;
    const intensity = Math.min(totalLessons, 4);
    if (intensity > 0) {
      baseClass += ` intensity-${intensity}`;
    }
    
    return baseClass;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–Ω—è
  const getTooltipText = (dayData, dateStr) => {
    const date = new Date(dateStr).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
    
    if (!dayData || dayData.length === 0) {
      return `${date} - –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π`;
    }
    
    const lessons = dayData.map(lesson => {
      const status = lesson.attendance_status === 'attended' ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' :
                    lesson.attendance_status === 'excused' ? '—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞' :
                    lesson.attendance_status === 'missed' ? '–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      return `${lesson.course_name || '–ó–∞–Ω—è—Ç–∏–µ'}: ${status}`;
    }).join('\n');
    
    return `${date}\n${lessons}`;
  };

  const getAttendancePercentage = () => {
    const { totalLessons, attendedLessons } = attendanceData.stats || {};
    if (totalLessons === 0) return 0;
    return Math.round((attendedLessons / totalLessons) * 100);
  };

  const stats = attendanceData.stats || {};
  const percentage = getAttendancePercentage();
  const weeks = generateMonthCalendar();

  return (
    <div className="attendance-widget">
      <div className="attendance-header">
        <h3>üìä –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</h3>
        <div className="attendance-summary">
          <span className="summary-text">
            <strong>{stats.totalLessons || 0}</strong> –∑–∞–Ω—è—Ç–∏–π –≤—Å–µ–≥–æ
          </span>
        </div>
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="attendance-stats-grid">
        <div className="stat-item">
          <span className="stat-number">{stats.totalLessons || 0}</span>
          <span className="stat-label">–≤—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{stats.attendedLessons || 0}</span>
          <span className="stat-label">–ø–æ—Å–µ—â–µ–Ω–æ</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{stats.excusedLessons || 0}</span>
          <span className="stat-label">—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{percentage}%</span>
          <span className="stat-label">–ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è</span>
        </div>
      </div>

      {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Å—è—Ü–∞–º */}
      <div className="activity-calendar">
        <div className="calendar-container">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º */}
          <div className="month-navigation">
            <button 
              className="nav-button" 
              onClick={goToPreviousMonth}
              title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
            >
              ‚Üê
            </button>
            <h3 className="current-month">
              {currentDate.toLocaleDateString('ru-RU', { 
                month: 'long', 
                year: 'numeric' 
              })}
            </h3>
            <button 
              className="nav-button" 
              onClick={goToNextMonth}
              title="–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
            >
              ‚Üí
            </button>
            <button 
              className="nav-button today-button" 
              onClick={goToCurrentMonth}
              title="–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
            >
              –°–µ–≥–æ–¥–Ω—è
            </button>
          </div>
          
          <div className="calendar-grid">
            {/* –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ */}
            <div className="weekdays-header">
              {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day => (
                <div key={day} className="weekday-label">
                  {day}
                </div>
              ))}
            </div>
            
            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ */}
            <div className="calendar-weeks">
              {weeks.map((week, weekIndex) => (
                <div key={weekIndex} className="calendar-week">
                  {week.map((day, dayIndex) => {
                    const cellClass = getDayCellClass(day.dayData, day.isCurrentMonth, day.isToday);
                    const tooltipText = getTooltipText(day.dayData, day.dateStr);
                    
                    return (
                      <div
                        key={dayIndex}
                        className={cellClass}
                        title={tooltipText}
                      >
                        <span className="day-number">
                          {day.date.getDate()}
                        </span>
                        {day.dayData && day.dayData.length > 0 && (
                          <div className="lesson-indicator">
                            <span className="lesson-count">{day.dayData.length}</span>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <div className="calendar-legend">
          <span className="legend-label">–ú–µ–Ω—å—à–µ</span>
          <div className="legend-colors">
            <div className="legend-item">
              <div className="day-cell empty"></div>
              <span>–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π</span>
            </div>
            <div className="legend-item">
              <div className="day-cell excused intensity-1"></div>
              <span>–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è</span>
            </div>
            <div className="legend-item">
              <div className="day-cell attended intensity-1"></div>
              <span>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</span>
            </div>
            <div className="legend-item">
              <div className="day-cell missed intensity-1"></div>
              <span>–ü—Ä–æ–ø—É—Å—Ç–∏–ª</span>
            </div>
          </div>
          <span className="legend-label">–ë–æ–ª—å—à–µ</span>
        </div>
      </div>
    </div>
  );
}
