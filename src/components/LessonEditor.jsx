import React, { useState } from 'react';
import { 
  createLessonWithMaterials, 
  updateLessonWithMaterials,
  createLessonWithMaterialsText,
  updateLessonWithMaterialsText
} from '../services/lessonService';
import '../styles/LessonEditor.css';

export default function LessonEditor({ courseId, lesson = null, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    name: lesson?.name || '',
  });
  
  const [materialMode, setMaterialMode] = useState('file'); // 'text' –∏–ª–∏ 'file'
  
  // –î–ª—è —Ñ–∞–π–ª–æ–≤
  const [teacherMaterialFile, setTeacherMaterialFile] = useState(null);
  const [studentMaterialFile, setStudentMaterialFile] = useState(null);
  const [homeworkMaterialFile, setHomeworkMaterialFile] = useState(null);
  
  // –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const [teacherMaterialName, setTeacherMaterialName] = useState(lesson?.teacher_material?.name || '');
  const [studentMaterialName, setStudentMaterialName] = useState(lesson?.student_material?.name || '');
  const [homeworkMaterialName, setHomeworkMaterialName] = useState(lesson?.homework?.name || '');
  
  // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const [teacherMaterialText, setTeacherMaterialText] = useState('');
  const [studentMaterialText, setStudentMaterialText] = useState('');
  const [homeworkMaterialText, setHomeworkMaterialText] = useState('');
  
  const [loading, setLoading] = useState(false);

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleFileChange = (type, file) => {
    switch (type) {
      case 'teacher':
        setTeacherMaterialFile(file);
        if (file && !teacherMaterialName) {
          setTeacherMaterialName(file.name.split('.')[0]); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        }
        break;
      case 'student':
        setStudentMaterialFile(file);
        if (file && !studentMaterialName) {
          setStudentMaterialName(file.name.split('.')[0]);
        }
        break;
      case 'homework':
        setHomeworkMaterialFile(file);
        if (file && !homeworkMaterialName) {
          setHomeworkMaterialName(file.name.split('.')[0]);
        }
        break;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    try {
      setLoading(true);
      
      if (materialMode === 'file') {
        // –†–ï–ñ–ò–ú –§–ê–ô–õ–û–í - –∏—Å–ø–æ–ª—å–∑—É–µ–º multipart/form-data
        const submitData = new FormData();
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        const lessonData = {
          name: formData.name,
          ...(teacherMaterialName && { teacher_material_name: teacherMaterialName }),
          ...(studentMaterialName && { student_material_name: studentMaterialName }),
          ...(homeworkMaterialName && { homework_material_name: homeworkMaterialName }),
          // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–µ–º ID
          ...(lesson && {
            id: lesson.id,
            ...(lesson.teacher_material_id && { teacher_material_id: lesson.teacher_material_id }),
            ...(lesson.student_material_id && { student_material_id: lesson.student_material_id }),
            ...(lesson.homework_id && { homework_id: lesson.homework_id })
          })
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        submitData.append('data', JSON.stringify(lessonData));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
        if (teacherMaterialFile) {
          submitData.append('teacher_material_file', teacherMaterialFile);
        }
        if (studentMaterialFile) {
          submitData.append('student_material_file', studentMaterialFile);
        }
        if (homeworkMaterialFile) {
          submitData.append('homework_material_file', homeworkMaterialFile);
        }
        
        console.log('[LessonEditor] Submitting with files:', {
          courseId,
          lessonData,
          files: {
            teacher: teacherMaterialFile?.name,
            student: studentMaterialFile?.name,
            homework: homeworkMaterialFile?.name
          }
        });
        
        if (lesson) {
          await updateLessonWithMaterials(courseId, lesson.id, submitData);
        } else {
          await createLessonWithMaterials(courseId, submitData);
        }
        
      } else {
        // –†–ï–ñ–ò–ú –¢–ï–ö–°–¢–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON
        const textData = {
          name: formData.name,
          ...(teacherMaterialName && { 
            teacher_material_name: teacherMaterialName,
            teacher_material_text: teacherMaterialText 
          }),
          ...(studentMaterialName && { 
            student_material_name: studentMaterialName,
            student_material_text: studentMaterialText 
          }),
          ...(homeworkMaterialName && { 
            homework_material_name: homeworkMaterialName,
            homework_material_text: homeworkMaterialText 
          }),
          // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–µ–º ID
          ...(lesson && {
            id: lesson.id,
            ...(lesson.teacher_material_id && { teacher_material_id: lesson.teacher_material_id }),
            ...(lesson.student_material_id && { student_material_id: lesson.student_material_id }),
            ...(lesson.homework_id && { homework_id: lesson.homework_id })
          })
        };
        
        console.log('[LessonEditor] Submitting with text:', { courseId, textData });
        
        if (lesson) {
          await updateLessonWithMaterialsText(courseId, lesson.id, textData);
        } else {
          await createLessonWithMaterialsText(courseId, textData);
        }
      }
      
      onSave();
      
    } catch (error) {
      console.error('[LessonEditor] Error saving lesson:', error);
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.response?.data?.detail) {
        if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail
            .map(err => `${err.loc?.join('.')}: ${err.msg}`)
            .join('\n');
        } else {
          errorMessage = error.response.data.detail;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–∞:\n' + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="lesson-editor">
      <form onSubmit={handleSubmit} className="lesson-form">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ */}
        <div className="form-section">
          <label className="form-label">
            <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ *</span>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞..."
              className="form-input"
            />
          </label>
        </div>

        {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
        <div className="form-section">
          <label className="form-label">
            <span className="label-text">–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</span>
            <div className="radio-group">
              <label className="radio-option">
                <input
                  type="radio"
                  value="file"
                  checked={materialMode === 'file'}
                  onChange={(e) => setMaterialMode(e.target.value)}
                />
                <span className="radio-label">üìÅ –§–∞–π–ª–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</span>
              </label>
              <label className="radio-option">
                <input
                  type="radio"
                  value="text"
                  checked={materialMode === 'text'}
                  onChange={(e) => setMaterialMode(e.target.value)}
                />
                <span className="radio-label">üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (HTML)</span>
              </label>
            </div>
          </label>
        </div>

        {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
        <div className="materials-section">
          <h3 className="section-title">üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞</h3>
          
          {/* –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */}
          <div className="material-block">
            <div className="material-header">
              <h4 className="material-title">üë®‚Äçüè´ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h4>
              <span className="material-subtitle">
                {materialMode === 'file' ? '–ö–æ–Ω—Å–ø–µ–∫—Ç, –ø–ª–∞–Ω —É—Ä–æ–∫–∞, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' : 'HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'}
              </span>
            </div>
            
            <label className="form-label">
              <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
              <input
                type="text"
                value={teacherMaterialName}
                onChange={(e) => setTeacherMaterialName(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞ –ø–æ React"
                className="form-input"
              />
            </label>
            
            {materialMode === 'file' ? (
              <div className="file-upload">
                <input
                  type="file"
                  id="teacher-file"
                  onChange={(e) => handleFileChange('teacher', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="teacher-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {teacherMaterialFile ? teacherMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {teacherMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(teacherMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-area">
                <label className="form-label">
                  <span className="label-text">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (HTML)</span>
                  <textarea
                    value={teacherMaterialText}
                    onChange={(e) => setTeacherMaterialText(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."
                    rows={6}
                    className="form-textarea"
                  />
                </label>
              </div>
            )}
            
            {lesson?.teacher_material && (
              <div className="current-material">
                –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: {lesson.teacher_material.name}
              </div>
            )}
          </div>

          {/* –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
          <div className="material-block">
            <div className="material-header">
              <h4 className="material-title">üë®‚Äçüéì –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞</h4>
              <span className="material-subtitle">
                {materialMode === 'file' ? '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏' : 'HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞'}
              </span>
            </div>
            
            <label className="form-label">
              <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
              <input
                type="text"
                value={studentMaterialName}
                onChange={(e) => setStudentMaterialName(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ React"
                className="form-input"
              />
            </label>
            
            {materialMode === 'file' ? (
              <div className="file-upload">
                <input
                  type="file"
                  id="student-file"
                  onChange={(e) => handleFileChange('student', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="student-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {studentMaterialFile ? studentMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {studentMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(studentMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-area">
                <label className="form-label">
                  <span className="label-text">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (HTML)</span>
                  <textarea
                    value={studentMaterialText}
                    onChange={(e) => setStudentMaterialText(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."
                    rows={6}
                    className="form-textarea"
                  />
                </label>
              </div>
            )}
            
            {lesson?.student_material && (
              <div className="current-material">
                –¢–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª: {lesson.student_material.name}
              </div>
            )}
          </div>

          {/* –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          <div className="material-block">
            <div className="material-header">
              <h4 className="material-title">üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
              <span className="material-subtitle">
                {materialMode === 'file' ? '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è' : 'HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞–Ω–∏—è'}
              </span>
            </div>
            
            <label className="form-label">
              <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</span>
              <input
                type="text"
                value={homeworkMaterialName}
                onChange={(e) => setHomeworkMaterialName(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ React"
                className="form-input"
              />
            </label>
            
            {materialMode === 'file' ? (
              <div className="file-upload">
                <input
                  type="file"
                  id="homework-file"
                  onChange={(e) => handleFileChange('homework', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="homework-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {homeworkMaterialFile ? homeworkMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {homeworkMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(homeworkMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-area">
                <label className="form-label">
                  <span className="label-text">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞–Ω–∏—è (HTML)</span>
                  <textarea
                    value={homeworkMaterialText}
                    onChange={(e) => setHomeworkMaterialText(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞–Ω–∏—è..."
                    rows={6}
                    className="form-textarea"
                  />
                </label>
              </div>
            )}
            
            {lesson?.homework && (
              <div className="current-material">
                –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {lesson.homework.name}
              </div>
            )}
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="submit" 
            className="btn-primary btn-save"
            disabled={loading}
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (lesson ? 'üíæ –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫' : '‚ú® –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫')}
          </button>
          <button 
            type="button" 
            className="btn-secondary"
            onClick={onCancel}
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
}