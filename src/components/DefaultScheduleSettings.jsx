import React, { useState, useEffect } from 'react';
import { 
  WEEKDAYS, 
  WEEKDAY_NAMES, 
  INTERVALS, 
  INTERVAL_NAMES,
  GroupScheduleSettings 
} from '../services/groupScheduleService';
import '../styles/DefaultScheduleSettings.css';

const DefaultScheduleSettings = () => {
  const [settings, setSettings] = useState({
    dayOfWeek: WEEKDAYS.MONDAY,
    startTime: '18:00',
    endTime: '20:00',
    interval: INTERVALS.WEEKLY
  });

  const [isOpen, setIsOpen] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  useEffect(() => {
    const saved = localStorage.getItem('default_schedule_settings');
    if (saved) {
      try {
        const savedSettings = JSON.parse(saved);
        setSettings(savedSettings);
      } catch (error) {
        console.warn('Error loading default schedule settings:', error);
      }
    }
  }, []);

  const handleChange = (field, value) => {
    setSettings(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('default_schedule_settings', JSON.stringify(settings));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    alert(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n` +
          `–î–µ–Ω—å: ${WEEKDAY_NAMES[settings.dayOfWeek]}\n` +
          `–í—Ä–µ–º—è: ${settings.startTime} - ${settings.endTime}\n` +
          `–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: ${INTERVAL_NAMES[settings.interval]}`);
    
    setIsOpen(false);
  };

  const handleReset = () => {
    if (window.confirm('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
      localStorage.removeItem('default_schedule_settings');
      setSettings({
        dayOfWeek: WEEKDAYS.MONDAY,
        startTime: '18:00',
        endTime: '20:00',
        interval: INTERVALS.WEEKLY
      });
      alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
  };

  return (
    <div className="default-schedule-settings">
      <button 
        className="settings-toggle-btn"
        onClick={() => setIsOpen(!isOpen)}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
      >
        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      </button>

      {isOpen && (
        <div className="settings-modal-overlay">
          <div className="settings-modal">
            <div className="settings-header">
              <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
              <button 
                className="close-btn"
                onClick={() => setIsOpen(false)}
              >
                √ó
              </button>
            </div>

            <div className="settings-body">
              <p className="settings-description">
                –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
              </p>

              {/* –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
              <div className="setting-group">
                <label className="setting-label">
                  üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                </label>
                <select
                  value={settings.dayOfWeek}
                  onChange={(e) => handleChange('dayOfWeek', parseInt(e.target.value))}
                  className="setting-select"
                >
                  {Object.entries(WEEKDAYS).map(([key, value]) => (
                    <option key={key} value={value}>
                      {WEEKDAY_NAMES[value]}
                    </option>
                  ))}
                </select>
              </div>

              {/* –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ */}
              <div className="setting-group">
                <label className="setting-label">
                  üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                </label>
                <input
                  type="time"
                  value={settings.startTime}
                  onChange={(e) => handleChange('startTime', e.target.value)}
                  className="setting-input"
                />
              </div>

              {/* –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è */}
              <div className="setting-group">
                <label className="setting-label">
                  üïï –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                </label>
                <input
                  type="time"
                  value={settings.endTime}
                  onChange={(e) => handleChange('endTime', e.target.value)}
                  className="setting-input"
                />
              </div>

              {/* –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å */}
              <div className="setting-group">
                <label className="setting-label">
                  üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å
                </label>
                <select
                  value={settings.interval}
                  onChange={(e) => handleChange('interval', e.target.value)}
                  className="setting-select"
                >
                  {Object.entries(INTERVALS).map(([key, value]) => (
                    <option key={key} value={value}>
                      {INTERVAL_NAMES[value]}
                    </option>
                  ))}
                </select>
              </div>

              {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
              <div className="settings-preview">
                <h4>üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h4>
                <div className="preview-content">
                  <div className="preview-item">
                    <strong>–î–µ–Ω—å:</strong> {WEEKDAY_NAMES[settings.dayOfWeek]}
                  </div>
                  <div className="preview-item">
                    <strong>–í—Ä–µ–º—è:</strong> {settings.startTime} - {settings.endTime}
                  </div>
                  <div className="preview-item">
                    <strong>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</strong> {INTERVAL_NAMES[settings.interval]}
                  </div>
                </div>
              </div>
            </div>

            <div className="settings-footer">
              <button 
                className="btn-secondary"
                onClick={handleReset}
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
              </button>
              <button 
                className="btn-primary"
                onClick={handleSave}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DefaultScheduleSettings;
