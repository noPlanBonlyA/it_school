// src/components/PointsManagement.jsx

import React, { useState, useEffect } from 'react';
import { 
  POINT_REASONS, 
  REASON_LABELS,
  updateStudentPoints
} from '../services/coinHistoryService';
import { createNotificationForStudent } from '../services/notificationService';
import { listStudents } from '../services/studentService';
import '../styles/PointsManagement.css';

const PointsManagement = ({ onClose, selectedStudent = null }) => {
  const [formData, setFormData] = useState({
    student_id: selectedStudent?.id || '',
    student_name: selectedStudent ? 
      `${selectedStudent.user?.first_name} ${selectedStudent.user?.surname}`.trim() : '',
    reason: POINT_REASONS.BONUS,
    changed_points: '',
    description: ''
  });

  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const loadStudents = async () => {
      try {
        const response = await listStudents({ limit: 100, offset: 0 });
        setStudents(response.objects || []);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
      }
    };

    if (!selectedStudent) {
      loadStudents();
    }
  }, [selectedStudent]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (!formData.student_name || selectedStudent) {
      setFilteredStudents([]);
      return;
    }

    const filtered = students.filter(student => {
      const fullName = `${student.user?.first_name} ${student.user?.surname}`.toLowerCase();
      const email = student.user?.email?.toLowerCase() || '';
      const search = formData.student_name.toLowerCase();
      
      return fullName.includes(search) || email.includes(search);
    }).slice(0, 5); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    setFilteredStudents(filtered);
  }, [formData.student_name, students, selectedStudent]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (field === 'student_name' && !selectedStudent) {
      setShowSuggestions(value.length > 0);
    }
  };

  const selectStudent = (student) => {
    setFormData(prev => ({
      ...prev,
      student_id: student.id,
      student_name: `${student.user?.first_name} ${student.user?.surname}`.trim()
    }));
    setShowSuggestions(false);
    setFilteredStudents([]);
  };

  const handleQuickPoints = (points) => {
    setFormData(prev => ({ ...prev, changed_points: points.toString() }));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.student_id) {
      newErrors.student_name = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞';
    }

    if (!formData.changed_points) {
      newErrors.changed_points = '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç';
    } else {
      const points = parseInt(formData.changed_points);
      if (isNaN(points) || points === 0) {
        newErrors.changed_points = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –Ω–µ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é';
      }
    }

    if (!formData.description.trim()) {
      newErrors.description = '–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    setSuccessMessage('');
    setErrorMessage('');

    try {
      const points = parseInt(formData.changed_points);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é, –∏ –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
      const result = await updateStudentPoints(
        formData.student_id,
        formData.reason,
        points,
        formData.description,
        formData.student_id // studentProfileId –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      );

      console.log('[PointsManagement] Points update result:', result);

      setSuccessMessage(
        `–£—Å–ø–µ—à–Ω–æ ${points > 0 ? '–Ω–∞—á–∏—Å–ª–µ–Ω–æ' : '—Å–ø–∏—Å–∞–Ω–æ'} ${Math.abs(points)} –º–æ–Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É ${formData.student_name}. ` +
        `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance} –º–æ–Ω–µ—Ç.`
      );
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
      if (!selectedStudent) {
        setFormData({
          student_id: '',
          student_name: '',
          reason: POINT_REASONS.BONUS,
          changed_points: '',
          description: ''
        });
      } else {
        setFormData(prev => ({
          ...prev,
          changed_points: '',
          description: ''
        }));
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤:', error);
      setErrorMessage(
        error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    } finally {
      setLoading(false);
    }
  };

  const createNotificationText = (reason, points, description) => {
    const isPositive = points > 0;
    const pointsText = Math.abs(points) === 1 ? '–º–æ–Ω–µ—Ç—É' : 
                      (Math.abs(points) < 5 ? '–º–æ–Ω–µ—Ç—ã' : '–º–æ–Ω–µ—Ç');
    
    const action = isPositive ? '–ø–æ–ª—É—á–∏–ª–∏' : '–ø–æ—Ç—Ä–∞—Ç–∏–ª–∏';
    const emoji = isPositive ? 'üí∞' : 'üí∏';

    let message = `${emoji} –í—ã ${action} ${Math.abs(points)} ${pointsText}`;
    
    if (description) {
      message += `. ${description}`;
    }

    return message;
  };

  return (
    <div className="points-management">
      <div className="points-management-header">
        <h3 className="points-management-title">
          <span>üí∞</span>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∞–º–∏
        </h3>
        {onClose && (
          <button 
            className="cancel-btn"
            onClick={onClose}
            style={{ padding: '8px 12px', minWidth: 'auto' }}
          >
            ‚úï
          </button>
        )}
      </div>

      {successMessage && (
        <div className="success-message">
          <span>‚úÖ</span>
          {successMessage}
        </div>
      )}

      {errorMessage && (
        <div className="error-message">
          <span>‚ùå</span>
          {errorMessage}
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="points-form">
          {/* –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
          <div className="form-group">
            <label htmlFor="student">–°—Ç—É–¥–µ–Ω—Ç *</label>
            <div className="student-search">
              <input
                id="student"
                type="text"
                className={`form-control ${errors.student_name ? 'error' : ''}`}
                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –∏–ª–∏ email —Å—Ç—É–¥–µ–Ω—Ç–∞"
                value={formData.student_name}
                onChange={(e) => handleInputChange('student_name', e.target.value)}
                onFocus={() => !selectedStudent && setShowSuggestions(formData.student_name.length > 0)}
                onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                disabled={!!selectedStudent}
              />
              
              {showSuggestions && filteredStudents.length > 0 && (
                <div className="search-suggestions">
                  {filteredStudents.map(student => (
                    <div
                      key={student.id}
                      className="suggestion-item"
                      onClick={() => selectStudent(student)}
                    >
                      <div className="suggestion-name">
                        {student.user?.first_name} {student.user?.surname}
                      </div>
                      <div className="suggestion-email">
                        {student.user?.email}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            {errors.student_name && <div className="error-text">{errors.student_name}</div>}
          </div>

          {/* –ü—Ä–∏—á–∏–Ω–∞ */}
          <div className="form-group">
            <label htmlFor="reason">–ü—Ä–∏—á–∏–Ω–∞ *</label>
            <select
              id="reason"
              className="form-control"
              value={formData.reason}
              onChange={(e) => handleInputChange('reason', e.target.value)}
            >
              {Object.entries(REASON_LABELS).map(([key, label]) => (
                <option key={key} value={key}>{label}</option>
              ))}
            </select>
          </div>

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ */}
          <div className="form-group">
            <label htmlFor="points">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç *</label>
            <div className="points-input-group">
              <input
                id="points"
                type="number"
                className={`form-control ${errors.changed_points ? 'error' : ''}`}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)"
                value={formData.changed_points}
                onChange={(e) => handleInputChange('changed_points', e.target.value)}
              />
              <div className="points-buttons">
                <button type="button" className="quick-btn" onClick={() => handleQuickPoints(1)}>+1</button>
                <button type="button" className="quick-btn" onClick={() => handleQuickPoints(5)}>+5</button>
                <button type="button" className="quick-btn" onClick={() => handleQuickPoints(10)}>+10</button>
                <button type="button" className="quick-btn negative" onClick={() => handleQuickPoints(-1)}>-1</button>
                <button type="button" className="quick-btn negative" onClick={() => handleQuickPoints(-5)}>-5</button>
                <button type="button" className="quick-btn negative" onClick={() => handleQuickPoints(-10)}>-10</button>
              </div>
            </div>
            {errors.changed_points && <div className="error-text">{errors.changed_points}</div>}
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="form-group description-full">
            <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ *</label>
            <textarea
              id="description"
              className={`form-control ${errors.description ? 'error' : ''}`}
              placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è/—Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              rows={3}
            />
            {errors.description && <div className="error-text">{errors.description}</div>}
          </div>
        </div>

        <div className="submit-section">
          {onClose && (
            <button type="button" className="cancel-btn" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
          )}
          <button 
            type="submit" 
            className="submit-btn"
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="loading-spinner"></div>
                –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                üí∞ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PointsManagement;
