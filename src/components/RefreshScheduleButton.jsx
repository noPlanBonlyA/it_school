// src/components/RefreshScheduleButton.jsx

import React, { useState } from 'react';
import { refreshGroupSchedule } from '../services/groupScheduleService';
import ScheduleUpdateResultModal from './ScheduleUpdateResultModal';
import '../styles/RefreshScheduleButton.css';

export default function RefreshScheduleButton({ 
  groupId, 
  courseId, 
  courseName, 
  courses, // –º–∞—Å—Å–∏–≤ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
  variant = "default", // "default" –∏–ª–∏ "small"
  onRefresh 
}) {
  const [loading, setLoading] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalData, setModalData] = useState(null);

  const handleRefresh = async () => {
    if (!groupId) {
      alert('–ù–µ —É–∫–∞–∑–∞–Ω ID –≥—Ä—É–ø–ø—ã');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å —á–µ–º —Ä–∞–±–æ—Ç–∞–µ–º - —Å –æ–¥–Ω–∏–º –∫—É—Ä—Å–æ–º –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
    let coursesToUpdate = [];
    
    if (courseId) {
      // –†–∞–±–æ—Ç–∞–µ–º —Å –æ–¥–Ω–∏–º –∫—É—Ä—Å–æ–º
      coursesToUpdate = [{ id: courseId, name: courseName || '–∫—É—Ä—Å' }];
    } else if (courses && courses.length > 0) {
      // –†–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–æ–º –∫—É—Ä—Å–æ–≤
      coursesToUpdate = courses.map(course => ({
        id: course.id,
        name: course.name || '–∫—É—Ä—Å'
      }));
    } else {
      alert('–ù–µ—Ç –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      return;
    }

    try {
      setLoading(true);
      
      const allResults = [];
      let totalAdded = 0;
      let totalExisting = 0;
      let totalLessons = 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞
      for (const course of coursesToUpdate) {
        try {
          const result = await refreshGroupSchedule(groupId, course.id);
          
          allResults.push({
            course: course.name,
            success: true,
            ...result
          });
          
          totalAdded += result.added || 0;
          totalExisting += result.existing || 0;
          totalLessons += result.total || 0;
          
        } catch (error) {
          console.error(`Error refreshing schedule for course ${course.name}:`, error);
          allResults.push({
            course: course.name,
            success: false,
            error: error.message
          });
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const successCount = allResults.filter(r => r.success).length;
      const failCount = allResults.filter(r => !r.success).length;
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      const resultData = {
        success: successCount > 0,
        totalCourses: coursesToUpdate.length,
        successCount,
        failCount,
        totalAdded,
        totalExisting,
        totalLessons,
        results: allResults
      };
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      setModalData(resultData);
      setModalOpen(true);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (onRefresh) {
        onRefresh(resultData);
      }
      
    } catch (error) {
      console.error('Error refreshing schedule:', error);
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.response?.data?.detail) {
        errorMessage = Array.isArray(error.response.data.detail) 
          ? error.response.data.detail.map(err => err.msg).join(', ')
          : error.response.data.detail;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      alert(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const getDisplayText = () => {
    if (courseId) {
      return `–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞ "${courseName || '–∫—É—Ä—Å'}"`;
    } else if (courses && courses.length > 0) {
      return `–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ (${courses.length})`;
    }
    return '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';
  };

  const getButtonText = () => {
    if (loading) {
      return variant === "small" ? "–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è..." : "–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...";
    }
    
    if (variant === "small") {
      return "üîÑ –û–±–Ω–æ–≤–∏—Ç—å";
    }
    
    return "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ";
  };

  return (
    <>
      <button
        type="button"
        onClick={handleRefresh}
        disabled={loading}
        className={`refresh-schedule-btn ${variant === "small" ? "compact" : ""}`}
        title={getDisplayText()}
      >
        {loading ? (
          <>
            <span className="refresh-icon spinning">üîÑ</span>
            <span>{getButtonText()}</span>
          </>
        ) : (
          <span>{getButtonText()}</span>
        )}
      </button>

      <ScheduleUpdateResultModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        data={modalData}
      />
    </>
  );
}
