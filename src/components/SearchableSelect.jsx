// src/components/SearchableSelect.jsx
import React, { useState, useEffect, useRef } from 'react';
import '../styles/SearchableSelect.css';

export default function SearchableSelect({
  items = [],
  value = '',
  onChange,
  placeholder = '–ü–æ–∏—Å–∫...',
  displayField = 'name',
  valueField = 'id',
  renderItem,
  noResultsText = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
  className = '',
  disabled = false,
  icon = 'üîç'
}) {
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState('');
  const [filteredItems, setFilteredItems] = useState(items);
  const [selectedItem, setSelectedItem] = useState(null);
  
  const containerRef = useRef(null);
  const inputRef = useRef(null);

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ value
  useEffect(() => {
    if (value) {
      const item = items.find(item => item[valueField] === value);
      setSelectedItem(item);
    } else {
      setSelectedItem(null);
    }
  }, [value, items, valueField]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  useEffect(() => {
    if (!search.trim()) {
      setFilteredItems(items);
      return;
    }

    const searchLower = search.toLowerCase().trim();
    const filtered = items.filter(item => {
      // –ü–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ–ª—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const mainField = (item[displayField] || '').toString().toLowerCase();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø)
      const additionalFields = [];
      
      // –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏—â–µ–º –ø–æ –§–ò–û –∏ username
      if (item.user) {
        const fio = [
          item.user.first_name,
          item.user.surname,
          item.user.patronymic
        ].filter(Boolean).join(' ').toLowerCase();
        additionalFields.push(fio, (item.user.username || '').toLowerCase());
      }
      
      // –î–ª—è –≥—Ä—É–ø–ø –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
      if (item.description) {
        additionalFields.push((item.description || '').toLowerCase());
      }

      return mainField.includes(searchLower) ||
             additionalFields.some(field => field.includes(searchLower));
    });

    setFilteredItems(filtered);
  }, [search, items, displayField]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (containerRef.current && !containerRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleInputClick = () => {
    if (!disabled) {
      setIsOpen(true);
      if (inputRef.current) {
        inputRef.current.focus();
      }
    }
  };

  const handleItemSelect = (item) => {
    setSelectedItem(item);
    onChange(item[valueField]);
    setIsOpen(false);
    setSearch('');
  };

  const handleClear = (e) => {
    e.stopPropagation();
    setSelectedItem(null);
    onChange('');
    setSearch('');
  };

  const getDisplayText = () => {
    if (!selectedItem) return '';
    
    if (renderItem) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–Ω–¥–µ—Ä —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      const rendered = renderItem(selectedItem);
      if (typeof rendered === 'string') return rendered;
      return selectedItem[displayField];
    }
    
    return selectedItem[displayField];
  };

  const defaultRenderItem = (item) => {
    if (renderItem) {
      return renderItem(item);
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if (item.user) {
      const fio = [item.user.first_name, item.user.surname].filter(Boolean).join(' ');
      return (
        <div className="searchable-item-content">
          <div className="item-main">
            {fio || item.user.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
          </div>
          {fio && item.user.username && (
            <div className="item-secondary">@{item.user.username}</div>
          )}
        </div>
      );
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø
    return (
      <div className="searchable-item-content">
        <div className="item-main">{item[displayField]}</div>
        {item.description && (
          <div className="item-secondary">{item.description}</div>
        )}
      </div>
    );
  };

  return (
    <div 
      ref={containerRef}
      className={`searchable-select ${className} ${disabled ? 'disabled' : ''} ${isOpen ? 'open' : ''}`}
    >
      <div className="searchable-input-container" onClick={handleInputClick}>
        <div className="searchable-icon">{icon}</div>
        
        <input
          ref={inputRef}
          type="text"
          className="searchable-input"
          placeholder={selectedItem ? getDisplayText() : placeholder}
          value={isOpen ? search : (selectedItem ? getDisplayText() : '')}
          onChange={(e) => setSearch(e.target.value)}
          onFocus={() => !disabled && setIsOpen(true)}
          disabled={disabled}
          readOnly={!isOpen}
        />
        
        {selectedItem && (
          <button
            type="button"
            className="searchable-clear"
            onClick={handleClear}
            disabled={disabled}
          >
            √ó
          </button>
        )}
        
        <div className={`searchable-arrow ${isOpen ? 'open' : ''}`}>
          ‚ñº
        </div>
      </div>

      {isOpen && (
        <div className="searchable-dropdown">
          {filteredItems.length > 0 ? (
            <div className="searchable-items">
              {filteredItems.map(item => (
                <div
                  key={item[valueField]}
                  className={`searchable-item ${selectedItem && selectedItem[valueField] === item[valueField] ? 'selected' : ''}`}
                  onClick={() => handleItemSelect(item)}
                >
                  {defaultRenderItem(item)}
                </div>
              ))}
            </div>
          ) : (
            <div className="searchable-no-results">
              <div className="no-results-icon">üîç</div>
              <div className="no-results-text">{noResultsText}</div>
            </div>
          )}
          
          {items.length > 0 && (
            <div className="searchable-footer">
              –ü–æ–∫–∞–∑–∞–Ω–æ {filteredItems.length} –∏–∑ {items.length}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
