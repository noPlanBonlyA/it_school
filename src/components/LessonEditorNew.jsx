import React, { useState } from 'react';
import { 
  createLessonWithMaterials, 
  updateLessonWithMaterials
} from '../services/lessonService';
import '../styles/LessonEditor.css';
import '../styles/ManageUserPage.css'; // –§–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫

export default function LessonEditor({ courseId, lesson = null, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    name: lesson?.name || '',
  });
  
  // –§–∞–π–ª—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const [teacherAdditionalMaterialFile, setTeacherAdditionalMaterialFile] = useState(null);
  const [studentAdditionalMaterialFile, setStudentAdditionalMaterialFile] = useState(null);
  const [homeworkAdditionalMaterialFile, setHomeworkAdditionalMaterialFile] = useState(null);
  
  // –ù–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const [teacherMaterialName, setTeacherMaterialName] = useState(lesson?.teacher_material?.name || '');
  const [teacherAdditionalMaterialName, setTeacherAdditionalMaterialName] = useState('');
  const [studentMaterialName, setStudentMaterialName] = useState(lesson?.student_material?.name || '');
  const [studentAdditionalMaterialName, setStudentAdditionalMaterialName] = useState('');
  const [homeworkMaterialName, setHomeworkMaterialName] = useState('');
  const [homeworkAdditionalMaterialName, setHomeworkAdditionalMaterialName] = useState('');
  
  // HTML —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const [teacherMaterialText, setTeacherMaterialText] = useState('');
  const [studentMaterialText, setStudentMaterialText] = useState('');
  const [homeworkMaterialText, setHomeworkMaterialText] = useState('');
  
  const [loading, setLoading] = useState(false);

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleFileChange = (type, file) => {
    switch (type) {
      case 'teacher_additional':
        setTeacherAdditionalMaterialFile(file);
        if (file && !teacherAdditionalMaterialName) {
          setTeacherAdditionalMaterialName(file.name.split('.')[0]);
        }
        break;
      case 'student_additional':
        setStudentAdditionalMaterialFile(file);
        if (file && !studentAdditionalMaterialName) {
          setStudentAdditionalMaterialName(file.name.split('.')[0]);
        }
        break;
      case 'homework_additional':
        setHomeworkAdditionalMaterialFile(file);
        if (file && !homeworkAdditionalMaterialName) {
          setHomeworkAdditionalMaterialName(file.name.split('.')[0]);
        }
        break;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }
    
    try {
      setLoading(true);
      
      // –ù–æ–≤—ã–π API - —Å–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
      const submitData = new FormData();
      
      // –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
      const lessonData = {
        name: formData.name,
        // –ù–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        ...(teacherMaterialName && { teacher_material_name: teacherMaterialName }),
        ...(teacherAdditionalMaterialName && { teacher_additional_material_name: teacherAdditionalMaterialName }),
        ...(studentMaterialName && { student_material_name: studentMaterialName }),
        ...(studentAdditionalMaterialName && { student_additional_material_name: studentAdditionalMaterialName }),
        ...(homeworkMaterialName && { homework_material_name: homeworkMaterialName }),
        ...(homeworkAdditionalMaterialName && { homework_additional_material_name: homeworkAdditionalMaterialName }),
        // HTML —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        ...(teacherMaterialText && { teacher_material_text: teacherMaterialText }),
        ...(studentMaterialText && { student_material_text: studentMaterialText }),
        ...(homeworkMaterialText && { homework_material_text: homeworkMaterialText })
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
      submitData.append('data', JSON.stringify(lessonData));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      if (teacherAdditionalMaterialFile) {
        submitData.append('teacher_additional_material_file', teacherAdditionalMaterialFile);
      }
      if (studentAdditionalMaterialFile) {
        submitData.append('student_additional_material_file', studentAdditionalMaterialFile);
      }
      if (homeworkAdditionalMaterialFile) {
        submitData.append('homework_additional_material_file', homeworkAdditionalMaterialFile);
      }
      
      console.log('[LessonEditor] Submitting lesson:', {
        courseId,
        lessonData,
        files: {
          teacher_additional: teacherAdditionalMaterialFile?.name,
          student_additional: studentAdditionalMaterialFile?.name,
          homework_additional: homeworkAdditionalMaterialFile?.name
        }
      });
      
      if (lesson) {
        await updateLessonWithMaterials(courseId, lesson.id, submitData);
      } else {
        await createLessonWithMaterials(courseId, submitData);
      }
      
      onSave();
      
    } catch (error) {
      console.error('[LessonEditor] Error saving lesson:', error);
      
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.response?.data?.detail) {
        if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail
            .map(err => `${err.loc?.join('.')}: ${err.msg}`)
            .join('\n');
        } else {
          errorMessage = error.response.data.detail;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–∞:\n' + errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="lesson-editor">
      <div className="editor-header">
        <h2>{lesson ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫' : '‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫'}</h2>
      </div>

      <form onSubmit={handleSubmit} className="lesson-form">
        <div className="form-basic">
          <label className="form-label">
            <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ *</span>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞..."
              className="form-input"
            />
          </label>
        </div>

        {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
        <div className="materials-section">
          <h3 className="section-title">üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞</h3>
          
          {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */}
          <div className="material-category">
            <h4 className="category-title">üë®‚Äçüè´ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h4>
            
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (HTML —Ç–µ–∫—Å—Ç) */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìã –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª (HTML)</h5>
                <span className="material-subtitle">–ö–æ–Ω—Å–ø–µ–∫—Ç, –ø–ª–∞–Ω —É—Ä–æ–∫–∞, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
                <input
                  type="text"
                  value={teacherMaterialName}
                  onChange={(e) => setTeacherMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞ –ø–æ React"
                  className="form-input"
                />
              </label>
              
              <label className="form-label">
                <span className="label-text">HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</span>
                <textarea
                  value={teacherMaterialText}
                  onChange={(e) => setTeacherMaterialText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."
                  rows={6}
                  className="form-textarea"
                />
              </label>
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ñ–∞–π–ª) */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (—Ñ–∞–π–ª)</h5>
                <span className="material-subtitle">–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –ø—Ä–∏–º–µ—Ä—ã, —Ä–µ—Å—É—Ä—Å—ã</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
                <input
                  type="text"
                  value={teacherAdditionalMaterialName}
                  onChange={(e) => setTeacherAdditionalMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã"
                  className="form-input"
                />
              </label>
              
              <div className="file-upload">
                <input
                  type="file"
                  id="teacher-additional-file"
                  onChange={(e) => handleFileChange('teacher_additional', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="teacher-additional-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {teacherAdditionalMaterialFile ? teacherAdditionalMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {teacherAdditionalMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(teacherAdditionalMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
          <div className="material-category">
            <h4 className="category-title">üë®‚Äçüéì –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞</h4>
            
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ (HTML —Ç–µ–∫—Å—Ç) */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìã –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª (HTML)</h5>
                <span className="material-subtitle">–¢–µ–æ—Ä–∏—è, –ø—Ä–∏–º–µ—Ä—ã, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
                <input
                  type="text"
                  value={studentMaterialName}
                  onChange={(e) => setStudentMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ–æ—Ä–∏—è –ø–æ React"
                  className="form-input"
                />
              </label>
              
              <label className="form-label">
                <span className="label-text">HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ</span>
                <textarea
                  value={studentMaterialText}
                  onChange={(e) => setStudentMaterialText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞..."
                  rows={6}
                  className="form-textarea"
                />
              </label>
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ñ–∞–π–ª) */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (—Ñ–∞–π–ª)</h5>
                <span className="material-subtitle">–§–∞–π–ª—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ä–µ—Å—É—Ä—Å—ã</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</span>
                <input
                  type="text"
                  value={studentAdditionalMaterialName}
                  onChange={(e) => setStudentAdditionalMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"
                  className="form-input"
                />
              </label>
              
              <div className="file-upload">
                <input
                  type="file"
                  id="student-additional-file"
                  onChange={(e) => handleFileChange('student_additional', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="student-additional-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {studentAdditionalMaterialFile ? studentAdditionalMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {studentAdditionalMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(studentAdditionalMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          <div className="material-category">
            <h4 className="category-title">üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
            
            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (HTML —Ç–µ–∫—Å—Ç) */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìã –ó–∞–¥–∞–Ω–∏–µ (HTML)</h5>
                <span className="material-subtitle">–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</span>
                <input
                  type="text"
                  value={homeworkMaterialName}
                  onChange={(e) => setHomeworkMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ React"
                  className="form-input"
                />
              </label>
              
              <label className="form-label">
                <span className="label-text">–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (HTML)</span>
                <textarea
                  value={homeworkMaterialText}
                  onChange={(e) => setHomeworkMaterialText(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è..."
                  rows={6}
                  className="form-textarea"
                />
              </label>
            </div>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
            <div className="material-block">
              <div className="material-header">
                <h5 className="material-title">üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (—Ñ–∞–π–ª)</h5>
                <span className="material-subtitle">–®–∞–±–ª–æ–Ω—ã, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –ø—Ä–∏–º–µ—Ä—ã</span>
              </div>
              
              <label className="form-label">
                <span className="label-text">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</span>
                <input
                  type="text"
                  value={homeworkAdditionalMaterialName}
                  onChange={(e) => setHomeworkAdditionalMaterialName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"
                  className="form-input"
                />
              </label>
              
              <div className="file-upload">
                <input
                  type="file"
                  id="homework-additional-file"
                  onChange={(e) => handleFileChange('homework_additional', e.target.files[0])}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.html,.txt,.zip,.rar"
                  className="file-input"
                />
                <label htmlFor="homework-additional-file" className="file-label">
                  <span className="file-icon">üìÅ</span>
                  <span className="file-text">
                    {homeworkAdditionalMaterialFile ? homeworkAdditionalMaterialFile.name : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
                  </span>
                </label>
                {homeworkAdditionalMaterialFile && (
                  <div className="file-info">
                    <span className="file-size">
                      –†–∞–∑–º–µ—Ä: {Math.round(homeworkAdditionalMaterialFile.size / 1024)} KB
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="submit" 
            className="btn-primary btn-save"
            disabled={loading}
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (lesson ? 'üíæ –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫' : '‚ú® –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫')}
          </button>
          <button 
            type="button" 
            className="btn-secondary"
            onClick={onCancel}
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  );
}
