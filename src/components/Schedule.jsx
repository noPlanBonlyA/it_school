/*  src/components/Schedule.jsx
    –í–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è     */

import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import '../styles/Schedule.css';
import api from '../api/axiosInstance';
import { getUserScheduleOptimized, updateLessonGroup } from '../services/scheduleService';

export default function Schedule({ events, onSelect, selectedEvent, onClose }) {
  const { user } = useAuth();
  const navigate = useNavigate();
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('[Schedule] Component received events:', events);
  if (events && events.length > 0) {
    console.log('[Schedule] First event structure:', events[0]);
    console.log('[Schedule] First event course_id:', events[0].course_id);
    console.log('[Schedule] First event lesson_id:', events[0].lesson_id);
    console.log('[Schedule] Event keys:', Object.keys(events[0]));
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º selectedEvent –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  console.log('[Schedule] selectedEvent:', selectedEvent);
  if (selectedEvent) {
    console.log('[Schedule] selectedEvent course_id:', selectedEvent.course_id);
    console.log('[Schedule] selectedEvent lesson_id:', selectedEvent.lesson_id);
  }
  
  const [conductingLesson, setConductingLesson] = useState(null);
  const [students, setStudents] = useState([]);
  const [loadingStudents, setLoadingStudents] = useState(false);
  const [studentGrades, setStudentGrades] = useState({});
  const [studentComments, setStudentComments] = useState({});
  const [homeworkData, setHomeworkData] = useState({ 
    name: '', 
    file: null, 
    textContent: '' 
  });
  const [uploadingHomework, setUploadingHomework] = useState(false);
  const [toggleLoading, setToggleLoading] = useState(false);

  if (!events || events.length === 0) {
    return (
      <div className="schedule-empty">
        <div className="empty-icon">üìÖ</div>
        <p>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</p>
        <span className="empty-subtitle">–û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</span>
      </div>
    );
  }

  const formatTime = (dateString) => {
    if (!dateString) return '‚Äî';
    return new Date(dateString).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatDate = (dateString) => {
    if (!dateString) return '‚Äî';
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit'
    });
  };

  const getTimeUntil = (dateString) => {
    if (!dateString) return '';
    const now = new Date();
    const lessonTime = new Date(dateString);
    const diffMs = lessonTime - now;
    
    if (diffMs < 0) return '–ü—Ä–æ—à–ª–æ';
    
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    
    if (diffHours > 0) {
      return `—á–µ—Ä–µ–∑ ${diffHours}—á ${diffMinutes}–º`;
    } else if (diffMinutes > 0) {
      return `—á–µ—Ä–µ–∑ ${diffMinutes}–º`;
    } else {
      return '—Å–µ–π—á–∞—Å';
    }
  };

  const getStatusClass = (event) => {
    if (event.is_opened) return 'opened';
    const now = new Date();
    const lessonTime = new Date(event.start_datetime || event.start);
    return now < lessonTime ? 'scheduled' : 'closed';
  };

  const getStatusText = (event) => {
    if (event.is_opened) return '–û—Ç–∫—Ä—ã—Ç';
    const now = new Date();
    const lessonTime = new Date(event.start_datetime || event.start);
    return now < lessonTime ? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω' : '–ó–∞–∫—Ä—ã—Ç';
  };

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —É—Ä–æ–∫–∞
  const handleToggleLessonAccess = async (event) => {
    try {
      setToggleLoading(true);
      
      // –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É event
      console.log('[Schedule] DEBUG - Full event object:', event);
      console.log('[Schedule] DEBUG - User role:', user.role);
      console.log('[Schedule] DEBUG - Event fields:', {
        id: event.id,
        lesson_id: event.lesson_id,
        group_id: event.group_id,
        start_datetime: event.start_datetime,
        end_datetime: event.end_datetime,
        is_opened: event.is_opened,
        auditorium: event.auditorium
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.role !== 'teacher' && user.role !== 'admin' && user.role !== 'superadmin') {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!event.id || !event.lesson_id || !event.group_id) {
        console.error('[Schedule] Missing required fields:', {
          id: event.id,
          lesson_id: event.lesson_id,
          group_id: event.group_id
        });
        alert('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞');
        return;
      }
      
      const newOpenedState = !event.is_opened;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
      const updatePayload = {
        lesson_id: String(event.lesson_id),
        group_id: String(event.group_id),
        start_datetime: event.start_datetime || new Date().toISOString(),
        end_datetime: event.end_datetime || new Date().toISOString(),
        is_opened: Boolean(newOpenedState),
        auditorium: String(event.auditorium || ""),
        id: String(event.id)
      };
      
      console.log('[Schedule] DEBUG - Update payload:', updatePayload);
      console.log('[Schedule] DEBUG - API endpoint:', `/courses/lesson-group/${event.id}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lesson-group —á–µ—Ä–µ–∑ API
      const response = await api.put(`/courses/lesson-group/${event.id}`, updatePayload);
      
      console.log('[Schedule] Lesson access toggled successfully:', response.data);
      
      alert(newOpenedState ? '–£—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!' : '–£—Ä–æ–∫ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      window.location.reload();
      
    } catch (error) {
      console.error('[Schedule] Error toggling lesson access:', error);
      console.error('[Schedule] Error response:', error.response);
      console.error('[Schedule] Error data:', error.response?.data);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.response?.status === 403) {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞\n- –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —Å–∏—Å—Ç–µ–º–µ');
      } else if (error.response?.status === 404) {
        alert('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω');
      } else if (error.response?.status === 422) {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
        console.error('[Schedule] Validation details:', error.response?.data?.detail);
      } else {
        const errorMessage = error.response?.data?.detail || 
                            error.response?.data?.message || 
                            '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É';
        alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      }
    } finally {
      setToggleLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Ä–æ–∫–∞
  const loadLessonStudents = async (lessonGroupId) => {
    try {
      setLoadingStudents(true);
      console.log('[Schedule] Loading students for lesson group:', lessonGroupId);
      
      const response = await api.get('/courses/lesson-student', {
        params: { lesson_group_id: lessonGroupId }
      });
      
      console.log('[Schedule] Students loaded:', response.data);
      setStudents(response.data || []);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      const initialGrades = {};
      const initialComments = {};
      
      response.data.forEach(student => {
        initialGrades[student.id] = {
          coins_for_visit: student.coins_for_visit || 0,
          grade_for_visit: student.grade_for_visit || 0,
          is_visited: student.is_visited || false,
          is_excused_absence: student.is_excused_absence || false
        };
        initialComments[student.id] = '';
      });
      
      setStudentGrades(initialGrades);
      setStudentComments(initialComments);
      
    } catch (error) {
      console.error('[Schedule] Error loading students:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
    } finally {
      setLoadingStudents(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–≤–µ—Å—Ç–∏ —É—Ä–æ–∫"
  const handleConductLesson = async (event) => {
    console.log('[Schedule] Conducting lesson:', event);
    console.log('[Schedule] Event course_id:', event.course_id);
    console.log('[Schedule] Event lesson_id:', event.lesson_id);
    
    // –ï—Å–ª–∏ course_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    let courseId = event.course_id;
    
    if (!courseId && event.lesson_id) {
      try {
        console.log('[Schedule] Course ID missing, trying to get from full schedule...');
        const scheduleResponse = await api.get('/schedule/');
        const scheduleData = scheduleResponse.data;
        
        // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ ID –∏–ª–∏ lesson_id + group_id
        const matchingEvent = scheduleData.find(item => 
          item.id === event.id || 
          (item.lesson_id === event.lesson_id && item.group_id === event.group_id)
        );
        
        if (matchingEvent && matchingEvent.course_id) {
          courseId = matchingEvent.course_id;
          console.log('[Schedule] Retrieved course_id from full schedule:', courseId);
        } else {
          console.log('[Schedule] No matching event with course_id found in schedule');
          
          // –ü–æ–ø—ã—Ç–∫–∞ 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç course_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º lesson-group API —Å group_id
          if (event.group_id) {
            try {
              console.log('[Schedule] Trying lesson-group API with group_id parameter...');
              const lessonGroupsResponse = await api.get('/courses/lesson-group', {
                params: { group_id: event.group_id }
              });
              const lessonGroups = lessonGroupsResponse.data;
              
              if (Array.isArray(lessonGroups) && lessonGroups.length > 0) {
                // –ù–∞—Ö–æ–¥–∏–º lesson-group —Å –Ω—É–∂–Ω—ã–º lesson_id
                const targetLessonGroup = lessonGroups.find(lg => lg.lesson_id === event.lesson_id);
                if (targetLessonGroup && targetLessonGroup.lesson && targetLessonGroup.lesson.course_id) {
                  courseId = targetLessonGroup.lesson.course_id;
                  console.log('[Schedule] Retrieved course_id from lesson-group API:', courseId);
                }
              }
            } catch (lgError) {
              console.warn('[Schedule] Could not get course_id from lesson-group API:', lgError);
            }
          }
        }
      } catch (scheduleError) {
        console.error('[Schedule] Error getting course_id from schedule:', scheduleError);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!courseId || !event.lesson_id) {
      console.error('[Schedule] Missing course_id or lesson_id:', {
        course_id: courseId,
        lesson_id: event.lesson_id,
        originalEvent: event
      });
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º lesson_group_id –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const lessonGroupId = event.id; // ID –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - —ç—Ç–æ lesson_group_id
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º course_id
    const updatedEvent = { ...event, course_id: courseId };
    
    setConductingLesson({ ...updatedEvent, lesson_group_id: lessonGroupId });
    await loadLessonStudents(lessonGroupId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —É—Ä–æ–∫—É
  const handleOpenLessonPage = (event) => {
    console.log('[Schedule] Opening lesson page for:', event);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É—Ä–æ–∫—É
    if (event.course_id && event.lesson_id) {
      if (user.role === 'teacher') {
        navigate(`/courses/${event.course_id}/teacher/lessons/${event.lesson_id}`);
      } else if (user.role === 'student') {
        navigate(`/courses/${event.course_id}/lessons/${event.lesson_id}`);
      }
    } else {
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –∏ —É—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞');
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const handleSaveGrades = async () => {
    try {
      console.log('[Schedule] Saving grades and comments...');
      
      for (const student of students) {
        const grades = studentGrades[student.id];
        const comment = studentComments[student.id];
        
        if (!grades) continue;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞
        const updateData = {
          student_id: student.student_id,
          lesson_group_id: student.lesson_group_id,
          is_visited: grades.is_visited,
          is_excused_absence: grades.is_excused_absence,
          coins_for_visit: parseInt(grades.coins_for_visit) || 0,
          grade_for_visit: parseInt(grades.grade_for_visit) || 0,
          is_sent_homework: student.is_sent_homework || false,
          is_graded_homework: student.is_graded_homework || false,
          coins_for_homework: student.coins_for_homework || 0,
          grade_for_homework: student.grade_for_homework || 0
        };
        
        await api.put(`/courses/lesson-student/${student.id}`, updateData);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (comment && comment.trim()) {
          try {
            const studentProfileId = student.student?.id;
            if (studentProfileId) {
              await api.post('/notifications/', 
                { content: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—Ä–æ–∫—É "${conductingLesson.lesson_name}": ${comment.trim()}` },
                { 
                  params: { 
                    recipient_type: 'student', 
                    recipient_id: studentProfileId 
                  } 
                }
              );
            }
          } catch (notifError) {
            console.error('[Schedule] Error sending notification:', notifError);
          }
        }
      }
      
      alert('–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      setConductingLesson(null);
      setStudents([]);
      
    } catch (error) {
      console.error('[Schedule] Error saving grades:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
  const handleGradeChange = (studentId, field, value) => {
    setStudentGrades(prev => ({
      ...prev,
      [studentId]: {
        ...prev[studentId],
        [field]: value
      }
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  const handleHomeworkUpload = async () => {
    if (!homeworkData.name || (!homeworkData.file && !homeworkData.textContent)) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
    if (!conductingLesson.course_id || !conductingLesson.lesson_id) {
      console.error('[Schedule] Missing lesson data for homework upload:', {
        course_id: conductingLesson.course_id,
        lesson_id: conductingLesson.lesson_id,
        conductingLesson
      });
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –∏–ª–∏ —É—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫.');
      return;
    }
    
    try {
      setUploadingHomework(true);
      
      console.log('[Schedule] Uploading homework with:', {
        course_id: conductingLesson.course_id,
        lesson_id: conductingLesson.lesson_id,
        name: homeworkData.name,
        hasText: !!homeworkData.textContent,
        hasFile: !!homeworkData.file
      });
      
      let uploadedSuccessfully = 0;
      let errors = [];
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (homeworkData.textContent && homeworkData.textContent.trim()) {
        try {
          const textEndpoint = `/courses/${conductingLesson.course_id}/lessons/${conductingLesson.lesson_id}/homework-material-text`;
          console.log('[Schedule] Text homework endpoint:', textEndpoint);
          
          await api.post(textEndpoint, {
            name: homeworkData.name,
            html_text: homeworkData.textContent.trim()
          });
          uploadedSuccessfully++;
          console.log('[Schedule] Text homework uploaded successfully');
        } catch (error) {
          console.error('[Schedule] Error uploading text homework:', error);
          errors.push('—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (homeworkData.file) {
        try {
          const fileEndpoint = `/courses/${conductingLesson.course_id}/lessons/${conductingLesson.lesson_id}/homework-material`;
          console.log('[Schedule] File homework endpoint:', fileEndpoint);
          
          const formData = new FormData();
          formData.append('homework_material_name', homeworkData.name);
          formData.append('homework_material_file', homeworkData.file);
          
          await api.post(fileEndpoint, formData, {
            headers: {
              'Content-Type': 'multipart/form-data'
            }
          });
          uploadedSuccessfully++;
          console.log('[Schedule] File homework uploaded successfully');
        } catch (error) {
          console.error('[Schedule] Error uploading file homework:', error);
          errors.push('—Ñ–∞–π–ª');
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (uploadedSuccessfully > 0 && errors.length === 0) {
        alert('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        setHomeworkData({ name: '', file: null, textContent: '' });
      } else if (uploadedSuccessfully > 0 && errors.length > 0) {
        alert(`–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errors.join(', ')}`);
      } else {
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: ${errors.join(', ')}`);
      }
      
    } catch (error) {
      console.error('[Schedule] Error uploading homework:', error);
      alert('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    } finally {
      setUploadingHomework(false);
    }
  };

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞
  if (conductingLesson) {
    return (
      <div className="modal-overlay">
        <div className="modal-content large">
          <div className="modal-header">
            <h2>–ü—Ä–æ–≤–µ—Å—Ç–∏ —É—Ä–æ–∫: {conductingLesson.lesson_name}</h2>
            <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
              –ö—É—Ä—Å ID: {conductingLesson.course_id || '–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù'} | –£—Ä–æ–∫ ID: {conductingLesson.lesson_id || '–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù'}
            </div>
            <button className="close-modal" onClick={() => setConductingLesson(null)}>√ó</button>
          </div>
          
          <div className="modal-body">
            {loadingStudents ? (
              <div className="loading-container">
                <div className="loader"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...</p>
              </div>
            ) : (
              <div className="conduct-lesson-content">
                {/* –°–µ–∫—Ü–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è */}
                <div className="homework-upload-section">
                  <h3>–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
                  <div className="homework-form">
                    <input
                      type="text"
                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
                      value={homeworkData.name}
                      onChange={(e) => setHomeworkData(prev => ({ ...prev, name: e.target.value }))}
                    />
                    
                    <div className="homework-content-section">
                      <h4>–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</h4>
                      <textarea
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è..."
                        value={homeworkData.textContent}
                        onChange={(e) => setHomeworkData(prev => ({ ...prev, textContent: e.target.value }))}
                        rows={4}
                        style={{ width: '100%', marginBottom: '10px' }}
                      />
                    </div>
                    
                    <div className="homework-file-section">
                      <h4>–§–∞–π–ª –∑–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</h4>
                      <input
                        type="file"
                        onChange={(e) => setHomeworkData(prev => ({ ...prev, file: e.target.files[0] }))}
                        accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
                      />
                    </div>
                    
                    <button 
                      onClick={handleHomeworkUpload}
                      disabled={uploadingHomework || !homeworkData.name || (!homeworkData.file && !homeworkData.textContent)}
                      className="btn-secondary"
                    >
                      {uploadingHomework ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –î–ó'}
                    </button>
                  </div>
                </div>

                {/* –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
                <div className="students-grades-section">
                  <h3>–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã ({students.length})</h3>
                  <div className="students-list">
                    {students.map(student => (
                      <div key={student.id} className="student-grade-item">
                        <div className="student-info">
                          <h4>{student.student?.user?.first_name} {student.student?.user?.surname}</h4>
                        </div>
                        
                        <div className="grade-controls">
                          <label>
                            <input
                              type="checkbox"
                              checked={studentGrades[student.id]?.is_visited || false}
                              onChange={(e) => handleGradeChange(student.id, 'is_visited', e.target.checked)}
                            />
                            –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                          </label>
                          
                          <label>
                            <input
                              type="checkbox"
                              checked={studentGrades[student.id]?.is_excused_absence || false}
                              onChange={(e) => handleGradeChange(student.id, 'is_excused_absence', e.target.checked)}
                            />
                            –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞
                          </label>
                          
                          <label>
                            –ë–∞–ª–ª—ã –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ:
                            <input
                              type="number"
                              min="0"
                              max="10"
                              value={studentGrades[student.id]?.coins_for_visit || 0}
                              onChange={(e) => handleGradeChange(student.id, 'coins_for_visit', e.target.value)}
                            />
                          </label>
                          
                          <label>
                            –û—Ü–µ–Ω–∫–∞ –∑–∞ —É—Ä–æ–∫:
                            <input
                              type="number"
                              min="0"
                              max="5"
                              value={studentGrades[student.id]?.grade_for_visit || 0}
                              onChange={(e) => handleGradeChange(student.id, 'grade_for_visit', e.target.value)}
                            />
                          </label>
                          
                          <label>
                            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
                            <textarea
                              placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç—É (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)"
                              value={studentComments[student.id] || ''}
                              onChange={(e) => setStudentComments(prev => ({ ...prev, [student.id]: e.target.value }))}
                              rows={2}
                            />
                          </label>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="modal-actions">
                  <button onClick={handleSaveGrades} className="btn-primary">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ä–æ–∫–∞
                  </button>
                  <button onClick={() => setConductingLesson(null)} className="btn-secondary">
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="schedule-container">
      {events.map((event, index) => (
        <div 
          key={event.id || index} 
          className={`schedule-item ${getStatusClass(event)}`}
          onClick={() => onSelect && onSelect(event)}
        >
          <div className="schedule-time-block">
            <div className="schedule-date">
              {formatDate(event.start_datetime || event.start)}
            </div>
            <div className="schedule-time">
              {formatTime(event.start_datetime || event.start)}
            </div>
            <div className="schedule-countdown">
              {getTimeUntil(event.start_datetime || event.start)}
            </div>
          </div>
          
          <div className="schedule-content">
            <div className="schedule-lesson-name">
              {event.lesson_name}
            </div>
            <div className="schedule-course-name">
              {event.course_name}
            </div>
            {event.group_name && (
              <div className="schedule-group">
                üë• {event.group_name}
              </div>
            )}
            {event.teacher_name && (
              <div className="schedule-teacher">
                üë©‚Äçüè´ {event.teacher_name}
              </div>
            )}
            {event.auditorium && (
              <div className="schedule-auditorium">
                üìç {event.auditorium}
              </div>
            )}
          </div>
          
          <div className="schedule-status">
            <div className={`status-indicator ${getStatusClass(event)}`}>
              {event.is_opened ? 'üü¢' : new Date() < new Date(event.start_datetime || event.start) ? 'üü°' : 'üî¥'}
            </div>
            <div className="status-text">
              {getStatusText(event)}
            </div>
          </div>
        </div>
      ))}

      {/* –í–∏–¥–∂–µ—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è */}
      {selectedEvent && (
        <div className="event-details">
          <button className="close-btn" onClick={onClose}>√ó</button>
          
          <div className="event-header">
            <h2>{selectedEvent.lesson_name}</h2>
            <span className={`status-badge ${getStatusClass(selectedEvent)}`}>
              {getStatusText(selectedEvent)}
            </span>
          </div>

          <div className="event-info">
            <div className="info-item">
              <strong>–ö—É—Ä—Å:</strong>
              <span>{selectedEvent.course_name}</span>
            </div>
            <div className="info-item">
              <strong>–í—Ä–µ–º—è:</strong>
              <span>
                {formatTime(selectedEvent.start_datetime)} - {formatTime(selectedEvent.end_datetime)}
              </span>
            </div>
            <div className="info-item">
              <strong>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</strong>
              <span>{selectedEvent.auditorium || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
            </div>
            {selectedEvent.group_name && (
              <div className="info-item">
                <strong>–ì—Ä—É–ø–ø–∞:</strong>
                <span>{selectedEvent.group_name}</span>
              </div>
            )}
            {selectedEvent.teacher_name && (
              <div className="info-item">
                <strong>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</strong>
                <span>{selectedEvent.teacher_name}</span>
              </div>
            )}
            <div className="info-item">
              <strong>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:</strong>
              <span style={{ color: selectedEvent.is_opened ? '#22c55e' : '#ef4444' }}>
                {selectedEvent.is_opened ? '–û—Ç–∫—Ä—ã—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' : '–ó–∞–∫—Ä—ã—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'}
              </span>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è */}
          {user.role === 'teacher' && (
            <div className="event-actions">
              <button 
                onClick={() => handleOpenLessonPage(selectedEvent)}
                className="btn-primary"
              >
                üìñ –ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É
              </button>
              <button 
                onClick={() => handleToggleLessonAccess(selectedEvent)}
                className="btn-primary"
                disabled={toggleLoading}
                style={{ 
                  backgroundColor: selectedEvent.is_opened ? '#ef4444' : '#22c55e'
                }}
              >
                {toggleLoading ? '‚è≥' : selectedEvent.is_opened ? 'üîí –ó–∞–∫—Ä—ã—Ç—å —É—Ä–æ–∫' : 'üîì –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫'}
              </button>
              <button 
                onClick={() => handleConductLesson(selectedEvent)}
                className="btn-primary"
              >
                üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ —É—Ä–æ–∫
              </button>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–∫ –æ—Ç–∫—Ä—ã—Ç */}
          {user.role === 'student' && selectedEvent.is_opened && (
            <div className="event-actions">
              <button 
                onClick={() => handleOpenLessonPage(selectedEvent)}
                className="btn-primary"
              >
                üìñ –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫
              </button>
            </div>
          )}

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–∫—Ä—ã—Ç */}
          {user.role === 'student' && !selectedEvent.is_opened && (
            <div className="event-actions">
              <p style={{ 
                color: '#6b7280', 
                fontStyle: 'italic', 
                textAlign: 'center',
                margin: 0
              }}>
                –£—Ä–æ–∫ –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
