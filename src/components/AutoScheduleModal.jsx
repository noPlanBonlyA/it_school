// src/components/AutoScheduleModal.jsx
import React, { useState, useEffect, useRef } from 'react';
import { 
  WEEKDAYS, 
  WEEKDAY_NAMES, 
  INTERVALS, 
  INTERVAL_NAMES, 
  GroupScheduleSettings,
  validateScheduleSettings,
  saveGroupScheduleSettings,
  loadGroupScheduleSettings
} from '../services/groupScheduleService';

const AutoScheduleModal = ({ 
  isOpen, 
  onClose, 
  onConfirm, 
  groupId, 
  courseName,
  lessonCount 
}) => {
  const [settings, setSettings] = useState(new GroupScheduleSettings());
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const dateInputRef = useRef(null);
  const [isDatePickerLocked, setIsDatePickerLocked] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (isOpen && groupId) {
      console.log('[AutoScheduleModal] Loading settings for group:', groupId);
      const savedSettings = loadGroupScheduleSettings(groupId);
      console.log('[AutoScheduleModal] Loaded settings:', savedSettings);
      setSettings(savedSettings);
      setErrors({});
    }
  }, [isOpen, groupId]);

  const handleChange = (field, value, event) => {
    // –ü—Ä–∏–≤–æ–¥–∏–º dayOfWeek –∫ —á–∏—Å–ª—É –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    let processedValue = value;
    if (field === 'dayOfWeek' && value !== '' && value !== null) {
      processedValue = parseInt(value);
    }
    
    setSettings(prev => ({
      ...prev,
      [field]: processedValue
    }));
    
    // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }

    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
    if (field === 'startDate' && dateInputRef.current) {
      setIsDatePickerLocked(true);
      dateInputRef.current.blur();
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 500–º—Å
      setTimeout(() => {
        setIsDatePickerLocked(false);
      }, 500);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—é –¥–∞—Ç—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä—É—á–Ω—É—é
  const handleDateClick = (e) => {
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
    
    if (isDatePickerLocked) {
      e.preventDefault();
      return;
    }
  };

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ –ø–æ–ª—é –¥–∞—Ç—ã
  const handleModalClick = (e) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –ø–æ –ø–æ–ª—é –¥–∞—Ç—ã –∏–ª–∏ –µ–≥–æ label
    const isDateInput = e.target === dateInputRef.current;
    const isDateLabel = e.target.htmlFor === 'startDate';
    const isInsideDateGroup = e.target.closest('.form-group')?.querySelector('#startDate') === dateInputRef.current;
    
    if (!isDateInput && !isDateLabel && !isInsideDateGroup && dateInputRef.current) {
      // –ö–ª–∏–∫ –±—ã–ª –≤–Ω–µ –ø–æ–ª—è –¥–∞—Ç—ã - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      dateInputRef.current.blur();
      setIsDatePickerLocked(true);
      setTimeout(() => {
        setIsDatePickerLocked(false);
      }, 100);
    }
  };

  const handleSubmit = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validation = validateScheduleSettings(settings);
    if (!validation.isValid) {
      setErrors(validation.errors);
      return;
    }

    setIsLoading(true);
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      saveGroupScheduleSettings(groupId, settings);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      await onConfirm(settings);
      
      onClose();
    } catch (error) {
      console.error('Error creating auto schedule:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setIsLoading(false);
    }
  };

  const generatePreview = () => {
    if (!settings.startDate || !settings.dayOfWeek || !settings.startTime) {
      return [];
    }

    const preview = [];
    let currentDate = new Date(settings.startDate);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    while (currentDate.getDay() !== settings.dayOfWeek) {
      currentDate.setDate(currentDate.getDate() + 1);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 3-—Ö —É—Ä–æ–∫–æ–≤
    for (let i = 0; i < Math.min(3, lessonCount); i++) {
      let lessonDate = new Date(currentDate);
      
      switch (settings.interval) {
        case INTERVALS.WEEKLY:
          lessonDate.setDate(lessonDate.getDate() + (i * 7));
          break;
        case INTERVALS.BIWEEKLY:
          lessonDate.setDate(lessonDate.getDate() + (i * 14));
          break;
        case INTERVALS.MONTHLY:
          lessonDate.setMonth(lessonDate.getMonth() + i);
          break;
      }

      preview.push({
        lessonNumber: i + 1,
        date: lessonDate.toLocaleDateString('ru-RU'),
        time: `${settings.startTime} - ${settings.endTime}`
      });
    }

    return preview;
  };

  if (!isOpen) return null;

  const preview = generatePreview();

  return (
    <div className="modal-overlay auto-schedule-modal" onClick={handleModalClick}>
      <div className="modal-content large" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>üóìÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h2>
          <div style={{ fontSize: '14px', color: '#666', marginTop: '4px' }}>
            –ö—É—Ä—Å: <strong>{courseName}</strong> ({lessonCount} —É—Ä–æ–∫–æ–≤)
          </div>
          <button className="close-modal" onClick={onClose}>√ó</button>
        </div>
        
        <div className="modal-body" onClick={handleModalClick}>
          <div className="schedule-settings">
            
            {/* –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
            <div className="form-group">
              <label htmlFor="dayOfWeek">–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∑–∞–Ω—è—Ç–∏–π</label>
              <select
                id="dayOfWeek"
                value={settings.dayOfWeek !== null && settings.dayOfWeek !== '' ? settings.dayOfWeek : ''}
                onChange={(e) => handleChange('dayOfWeek', parseInt(e.target.value), e)}
                className={`form-control ${errors.dayOfWeek ? 'error' : ''}`}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</option>
                {Object.entries(WEEKDAY_NAMES).map(([value, name]) => (
                  <option key={value} value={value}>{name}</option>
                ))}
              </select>
              {errors.dayOfWeek && <span className="error-text">{errors.dayOfWeek}</span>}
            </div>

            {/* –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π */}
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="startTime">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
                <input
                  type="time"
                  id="startTime"
                  value={settings.startTime}
                  onChange={(e) => handleChange('startTime', e.target.value, e)}
                  className={`form-control ${errors.startTime ? 'error' : ''}`}
                />
                {errors.startTime && <span className="error-text">{errors.startTime}</span>}
              </div>
              
              <div className="form-group">
                <label htmlFor="endTime">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                <input
                  type="time"
                  id="endTime"
                  value={settings.endTime}
                  onChange={(e) => handleChange('endTime', e.target.value, e)}
                  className={`form-control ${errors.endTime ? 'error' : ''}`}
                />
                {errors.endTime && <span className="error-text">{errors.endTime}</span>}
              </div>
            </div>

            {/* –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å */}
            <div className="form-group">
              <label htmlFor="interval">–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π</label>
              <select
                id="interval"
                value={settings.interval}
                onChange={(e) => handleChange('interval', e.target.value, e)}
                className={`form-control ${errors.interval ? 'error' : ''}`}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å</option>
                {Object.entries(INTERVAL_NAMES).map(([value, name]) => (
                  <option key={value} value={value}>{name}</option>
                ))}
              </select>
              {errors.interval && <span className="error-text">{errors.interval}</span>}
            </div>

            {/* –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ */}
            <div className="form-group" style={{ position: 'relative', isolation: 'isolate' }}>
              <label htmlFor="startDate">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π</label>
              <input
                ref={dateInputRef}
                type="date"
                id="startDate"
                value={settings.startDate}
                onChange={(e) => handleChange('startDate', e.target.value, e)}
                onClick={handleDateClick}
                onFocus={(e) => {
                  // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                  if (isDatePickerLocked) {
                    e.preventDefault();
                    e.target.blur();
                  }
                }}
                onKeyDown={(e) => {
                  // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                  if (isDatePickerLocked) {
                    e.preventDefault();
                  }
                }}
                readOnly={isDatePickerLocked}
                className={`form-control ${errors.startDate ? 'error' : ''}`}
                min={new Date().toISOString().split('T')[0]}
                style={{ 
                  cursor: isDatePickerLocked ? 'not-allowed' : 'pointer',
                  position: 'relative',
                  zIndex: 1
                }}
              />
              {errors.startDate && <span className="error-text">{errors.startDate}</span>}
            </div>

            {/* –ê—É–¥–∏—Ç–æ—Ä–∏—è */}
            <div className="form-group">
              <label htmlFor="auditorium">–ê—É–¥–∏—Ç–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
              <input
                type="text"
                id="auditorium"
                value={settings.auditorium}
                onChange={(e) => handleChange('auditorium', e.target.value, e)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 101, –ê–∫—Ç–æ–≤—ã–π –∑–∞–ª"
                className="form-control"
              />
            </div>

            {/* –ü—Ä–µ–≤—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
            {preview.length > 0 && (
              <div className="schedule-preview">
                <h3>–ü—Ä–µ–≤—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</h3>
                <div className="preview-list">
                  {preview.map((item, index) => (
                    <div key={index} className="preview-item">
                      <div className="preview-lesson">–£—Ä–æ–∫ {item.lessonNumber}</div>
                      <div className="preview-date">{item.date}</div>
                      <div className="preview-time">{item.time}</div>
                    </div>
                  ))}
                  {lessonCount > 3 && (
                    <div className="preview-item more">
                      <div className="preview-lesson">...</div>
                      <div className="preview-date">–µ—â–µ {lessonCount - 3} —É—Ä–æ–∫–æ–≤</div>
                      <div className="preview-time">–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</div>
                    </div>
                  )}
                </div>
              </div>
            )}

          </div>
        </div>
        
        <div className="modal-footer">
          <button 
            onClick={handleSubmit}
            className="btn-primary"
            disabled={isLoading}
          >
            {isLoading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...' : '‚úÖ –°–æ–∑–¥–∞—Ç—å '}
          </button>
          <button 
            onClick={onClose}
            className="btn-primary"
            style={{ backgroundColor: '#e40b0bff'}}
            disabled={isLoading}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default AutoScheduleModal;
