// src/services/coinHistoryService.js

import api from '../api/axiosInstance';
import { getStudentById, updateStudent } from './studentService';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (limit, offset)
 * @param {number} params.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–º–∞–∫—Å–∏–º—É–º 100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
 * @param {number} params.offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
 * @returns {Promise<Object>} –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏–Ω—Ç–æ–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 */
export const getPointsHistory = async (params = {}) => {
  try {
    const { limit = 10, offset = 0 } = params;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ API
    const validLimit = Math.min(Math.max(1, limit), 100);
    const validOffset = Math.max(0, offset);
    
    const response = await api.get('/points/history/student', {
      params: { 
        limit: validLimit, 
        offset: validOffset 
      }
    });
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤:', error);
    throw error;
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤/—Å–∏—Å—Ç–µ–º—ã)
 * @param {Object} historyData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
 * @param {string} historyData.student_id - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {string} historyData.reason - –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (Homework, Visit, Bonus, Penalty, Buy, Other)
 * @param {number} historyData.changed_points - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏–Ω—Ç–æ–≤
 * @param {string} historyData.description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {string} [historyData.id] - UUID –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export const createPointsHistory = async (historyData) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!historyData.student_id || !historyData.reason || typeof historyData.changed_points !== 'number') {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: student_id, reason, changed_points');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    const requestData = {
      student_id: historyData.student_id,
      reason: historyData.reason,
      changed_points: Number(historyData.changed_points),
      description: historyData.description || ''
    };

    // –î–æ–±–∞–≤–ª—è–µ–º id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (historyData.id) {
      requestData.id = historyData.id;
    }
    
    console.log('[CoinHistoryService] Sending request data:', requestData);
    
    const response = await api.post('/points/history/', requestData);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤:', error);
    throw error;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç
 * @param {string} studentProfileId - UUID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {number} coins - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
 * @returns {Promise<void>}
 */
const sendCoinsNotification = async (studentProfileId, coins, reason) => {
  try {
    await api.post('/notifications/', 
      { content: `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${coins} –º–æ–Ω–µ—Ç –∑–∞ ${reason}! ü™ô` },
      { 
        params: { 
          recipient_type: 'student', 
          recipient_id: studentProfileId 
        } 
      }
    );
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–Ω–µ—Ç–∞—Ö:', error);
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∑–∞ —É—Ä–æ–∫ –∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
 * @param {string} studentId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞ (–Ω–µ user_id!)
 * @param {Object} coinsData - –î–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö
 * @param {number} coinsData.coins_for_visit - –ú–æ–Ω–µ—Ç—ã –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
 * @param {number} coinsData.coins_for_homework - –ú–æ–Ω–µ—Ç—ã –∑–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
 * @param {Object} lessonInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ
 * @param {string} studentProfileId - ID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export const createLessonCoinsHistory = async (studentId, coinsData, lessonInfo = {}, studentProfileId = null) => {
  try {
    const records = [];
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    if (coinsData.coins_for_visit && coinsData.coins_for_visit > 0) {
      const visitRecord = {
        student_id: studentId, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å user_id –Ω–∞ student_id
        reason: POINT_REASONS.VISIT,
        changed_points: Number(coinsData.coins_for_visit),
        description: lessonInfo.lesson_name 
          ? `–ü–æ—Å–µ—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞ "${lessonInfo.lesson_name}"${lessonInfo.course_name ? ` (${lessonInfo.course_name})` : ''}`
          : '–ü–æ—Å–µ—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞'
      };
      
      const visitResponse = await createPointsHistory(visitRecord);
      records.push(visitResponse);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
      if (studentProfileId) {
        await sendCoinsNotification(
          studentProfileId, 
          coinsData.coins_for_visit, 
          '–ø–æ—Å–µ—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞'
        );
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    if (coinsData.coins_for_homework && coinsData.coins_for_homework > 0) {
      const homeworkRecord = {
        student_id: studentId, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å user_id –Ω–∞ student_id
        reason: POINT_REASONS.HOMEWORK,
        changed_points: Number(coinsData.coins_for_homework),
        description: lessonInfo.lesson_name 
          ? `–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ —É—Ä–æ–∫—É "${lessonInfo.lesson_name}"${lessonInfo.course_name ? ` (${lessonInfo.course_name})` : ''}`
          : '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'
      };
      
      const homeworkResponse = await createPointsHistory(homeworkRecord);
      records.push(homeworkResponse);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç –∑–∞ –¥–æ–º–∞—à–∫—É
      if (studentProfileId) {
        await sendCoinsNotification(
          studentProfileId, 
          coinsData.coins_for_homework, 
          '–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'
        );
      }
    }
    
    return records;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —É—Ä–æ–∫–∞:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    return [];
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {Object} historyData - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
 * @param {string} studentProfileId - ID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
 */
export const createPointsHistoryWithNotification = async (historyData, studentProfileId = null) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    const currentStudent = await getStudentById(historyData.student_id);
    if (!currentStudent) {
      throw new Error('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const response = await createPointsHistory(historyData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    const newPoints = (currentStudent.points || 0) + historyData.changed_points;
    await updateStudent(currentStudent.id, {
      user_id: currentStudent.user_id,
      points: Math.max(0, newPoints), // –ù–µ –¥–∞–µ–º –±–∞–ª–∞–Ω—Å—É —Å—Ç–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
      id: currentStudent.id
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (studentProfileId && historyData.changed_points !== 0) {
      const reasonText = REASON_LABELS[historyData.reason] || '–æ–ø–µ—Ä–∞—Ü–∏—é';
      const coinsText = historyData.changed_points > 0 
        ? `–Ω–∞—á–∏—Å–ª–µ–Ω–æ ${historyData.changed_points} –º–æ–Ω–µ—Ç`
        : `—Å–ø–∏—Å–∞–Ω–æ ${Math.abs(historyData.changed_points)} –º–æ–Ω–µ—Ç`;
      
      await sendCoinsNotification(
        studentProfileId,
        Math.abs(historyData.changed_points),
        historyData.changed_points > 0 ? reasonText.toLowerCase() : `—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ ${reasonText.toLowerCase()}`
      );
    }
    
    return response;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
 * @param {string} studentId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 * @param {number} changedPoints - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏–Ω—Ç–æ–≤
 * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @param {string} studentProfileId - ID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º
 */
export const updateStudentPoints = async (studentId, reason, changedPoints, description, studentProfileId = null) => {
  try {
    console.log('[CoinHistoryService] Updating student points:', { studentId, reason, changedPoints, description });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    // const currentStudent = await getStudentById(studentId);
    // if (!currentStudent) {
    //   throw new Error('–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    // }

    //console.log('[CoinHistoryService] Current student:', currentStudent);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å user_id
    // if (!currentStudent.user_id) {
    //   throw new Error('–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id');
    // }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º student_id)
    const historyRecord = await createPointsHistory({
      student_id: studentId, // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º studentId –Ω–∞–ø—Ä—è–º—É—é
      reason: reason,
      changed_points: Number(changedPoints),
      description: description || '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç'
    });

    console.log('[CoinHistoryService] History record created:', historyRecord);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
    //const newPoints = (currentStudent.points || 0) + changedPoints;
    // const updatedStudent = await updateStudent(studentId, {
    //   user_id: currentStudent.user_id,
    //   points: Math.max(0, newPoints), // –ù–µ –¥–∞–µ–º –±–∞–ª–∞–Ω—Å—É —Å—Ç–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    //   id: studentId
    // });

    //console.log('[CoinHistoryService] Student updated:', updatedStudent);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    if (studentProfileId && changedPoints !== 0) {
      const reasonText = REASON_LABELS[reason] || '–æ–ø–µ—Ä–∞—Ü–∏—é';
      await sendCoinsNotification(
        studentProfileId,
        Math.abs(changedPoints),
        changedPoints > 0 ? reasonText.toLowerCase() : `—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ ${reasonText.toLowerCase()}`
      );
    }
    
    return {
      historyRecord,
      //updatedStudent,
      //newBalance: Math.max(0, newPoints)
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤
 */
export const POINT_REASONS = {
  HOMEWORK: 'Homework',
  VISIT: 'Visit',
  BONUS: 'Bonus',
  PENALTY: 'Penalty',
  BUY: 'Buy',
  OTHER: 'Other'
};

/**
 * –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
export const REASON_LABELS = {
  [POINT_REASONS.HOMEWORK]: '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
  [POINT_REASONS.VISIT]: '–ü–æ—Å–µ—â–µ–Ω–∏–µ —É—Ä–æ–∫–∞',
  [POINT_REASONS.BONUS]: '–ë–æ–Ω—É—Å',
  [POINT_REASONS.PENALTY]: '–®—Ç—Ä–∞—Ñ',
  [POINT_REASONS.BUY]: '–ü–æ–∫—É–ø–∫–∞',
  [POINT_REASONS.OTHER]: '–î—Ä—É–≥–æ–µ'
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã
 */
export const getReasonIcon = (reason) => {
  const icons = {
    [POINT_REASONS.HOMEWORK]: 'üìù',
    [POINT_REASONS.VISIT]: '‚úÖ',
    [POINT_REASONS.BONUS]: 'üéÅ',
    [POINT_REASONS.PENALTY]: '‚ö†Ô∏è',
    [POINT_REASONS.BUY]: 'üõí',
    [POINT_REASONS.OTHER]: 'üí∞'
  };
  return icons[reason] || 'üí∞';
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è UI)
 * @param {number} changedPoints - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏–Ω—Ç–æ–≤
 * @returns {string} CSS –∫–ª–∞—Å—Å –∏–ª–∏ —Ü–≤–µ—Ç
 */
export const getOperationColor = (changedPoints) => {
  if (changedPoints > 0) return 'success'; // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  if (changedPoints < 0) return 'danger';  // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
  return 'secondary'; // –°–µ—Ä—ã–π –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏–Ω—Ç–æ–≤
 * @param {number} changedPoints - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∏–Ω—Ç–æ–≤
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export const formatPointsChange = (changedPoints) => {
  if (changedPoints > 0) {
    return `+${changedPoints}`;
  }
  return changedPoints.toString();
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @param {string} studentId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (limit, offset)
 * @param {number} params.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–º–∞–∫—Å–∏–º—É–º 100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
 * @param {number} params.offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
 * @returns {Promise<Object>} –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏–Ω—Ç–æ–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
 */
export const getStudentPointsHistory = async (studentId, params = {}) => {
  try {
    const { limit = 10, offset = 0 } = params;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ API
    const validLimit = Math.min(Math.max(1, limit), 100);
    const validOffset = Math.max(0, offset);
    
    console.log('[CoinHistoryService] Getting points history for studentId:', studentId);
    
    if (!studentId) {
      console.log('[CoinHistoryService] No studentId provided, using general endpoint for current user');
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ studentId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π endpoint –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return await getPointsHistory(params);
    }
    
    // –°–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ 
    // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π endpoint /api/points/history/ –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    
    try {
      console.log('[CoinHistoryService] Trying to get all points history records...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º)
      const allRecords = [];
      let currentOffset = 0;
      const pageSize = 100;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
      while (true) {
        const response = await api.get('/points/history/', {
          params: { 
            limit: pageSize,
            offset: currentOffset
          }
        });
        
        const pageData = response.data?.objects || [];
        console.log(`[CoinHistoryService] Got page with ${pageData.length} records (offset: ${currentOffset})`);
        
        if (pageData.length === 0) {
          break; // –ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç
        }
        
        allRecords.push(...pageData);
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pageData.length < pageSize) {
          break;
        }
        
        currentOffset += pageSize;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (currentOffset > 1000) {
          console.warn('[CoinHistoryService] Reached maximum offset limit, stopping...');
          break;
        }
      }
      
      console.log(`[CoinHistoryService] Total records retrieved: ${allRecords.length}`);
      console.log('[CoinHistoryService] Looking for records with student_id:', studentId);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ studentId - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
      const filteredHistory = allRecords.filter(record => {
        const matchesStudentId = record.student_id === studentId;
        const matchesUserId = record.user_id === studentId;
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (allRecords.indexOf(record) < 5) {
          console.log('[CoinHistoryService] Checking record:', {
            recordId: record.id,
            recordStudentId: record.student_id,
            recordUserId: record.user_id,
            targetStudentId: studentId,
            matchesStudentId,
            matchesUserId
          });
        }
        
        return matchesStudentId || matchesUserId;
      });
      
      console.log('[CoinHistoryService] Filtered history:', filteredHistory.length, 'records');
      
      if (filteredHistory.length > 0) {
        console.log('[CoinHistoryService] Found records:', filteredHistory);
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const startIndex = validOffset;
      const endIndex = startIndex + validLimit;
      const paginatedHistory = filteredHistory.slice(startIndex, endIndex);
      
      return {
        objects: paginatedHistory,
        meta: {
          total_count: filteredHistory.length,
          limit: validLimit,
          offset: validOffset
        }
      };
      
    } catch (error) {
      console.error('[CoinHistoryService] Error getting points history:', error);
      
      // Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
      return {
        objects: [],
        meta: {
          total_count: 0,
          limit: validLimit,
          offset: validOffset
        }
      };
    }
  } catch (error) {
    console.error('[CoinHistoryService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏–Ω—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      objects: [],
      meta: {
        total_count: 0,
        limit: params.limit || 10,
        offset: params.offset || 0
      }
    };
  }
};
